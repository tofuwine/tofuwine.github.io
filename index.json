[{"content":" 最新消息 2024-04-29\n站点还在初期试运行，很多样式在频繁的修改适配，样式目前闭源，考虑后续站点样式及内容稳定后，重新梳理发布建站攻略或开放源码。\n如果你看上哪部分样式，可以评论区留言，我会为你提供修改思路或对应源码。\n前言 本站使用 Hugo + PaperMod 主题， 并对样式进行了个性化修改，你可以在文中浏览到站点绝大部分的样式。\n文本 样式 效果 普通文本 This is plaintext 加粗 This is bold text 斜体 This text is italicized 删除 This was mistaken text 加粗嵌套斜体 This text is extremely important 加粗+斜体 All this text is important 下标 This is a subscript text 上标 This is a superscript text 部分样式通过 HTML 标签实现, 需开启配置:\nyaml config.yml Copy code 1 2 3 4 markup: goldmark: renderer: unsafe: true 代码 行内代码 Tofuwine\u0026rsquo;s Blog Powered by Hugo \u0026amp; PaperMod.\n代码块 主要配色参考:\nlight-theme: monokailight dark-theme: github-dark 标准样式 java Copy code 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 自定义标题 java io.github.tofuwine.main.HelloHugo.java Copy code 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 自定义起始行数 \u0026amp; 高亮指定行 go Copy code 100 101 102 103 104 105 106 107 108 109 func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \u0026#34;go\u0026#34;: return strings.Title case \u0026#34;chicago\u0026#34;: return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } 引用 这是一段引用内容。\nShortCode admonition 移植自 Hugo 的 Loveit 主题。\n教程参考 如何移植HUGO Loveit主題的admonition shortcodes —— 懶懶 目前支持的 admonition 类型:\nnote admonition - note abstract admonition - abstract info admonition - info tip admonition - tip success admonition - success question admonition - question warning admonition - warning failure admonition - failure danger admonition - danger bug admonition - bug example admonition - example quote admonition - quote twhl 文本高亮。效果如下：\nThis is a highlight text. 目录 章节默认以 H2 起始，H5 结束。\n主要改动:\n移动至屏幕左侧显示 教程参考 Hugo博客目录放在侧边 | PaperMod主题 —— Sulv 目录自动折叠/展开 你可以滚动界面观察左侧目录体验效果。\n悬浮按钮 前往评论区 (Go to comment) 前往评论区的悬浮按钮\n你可以在点击右侧对应的悬浮按钮进行体验。\n切换主题 (Theme toggle) 切换主题按钮。主题自带切换按钮在页面顶部，在阅读文章时切换很不方便 (即使有快捷键，也对访客不是很友好)。\n作者重新实现了一个悬浮按钮实现主题切换，同时保留 PaperMod 的切换按钮 (已禁用)。\n你可以在点击右侧对应的悬浮按钮进行体验。\n回到顶部 (Go to top) 回到顶部悬浮按钮, 显示进度。\n源码参考 博主网站: 有意栽花花满枝(https://blog.hjroyal.top/)\n开源代码: https://github.com/hjroyal/hugo-papermod-flowers 页面跳动效果 扩展实现了当用户滚动到页面最上方/最下方后，页面轻微的跳动提示用户已到顶/底。\n评论 本站集成 Giscus 评论系统。\n教程参考 Hugo 博客引入 Giscus 评论系统 —— 意琦行 适配主题变更 上述博文未描述评论界面的主题切换。本站对此进行了适配，Giscus 对应主题如下：\nlight-theme: light dark-theme: dark 赞赏 提供赞赏按钮，点击按钮显示微信 \u0026amp; 支付宝收款码，读者可扫码打赏作者。\n源码参考 博主网站: 有意栽花花满枝(https://blog.hjroyal.top/)\n开源代码: https://github.com/hjroyal/hugo-papermod-flowers 扩展实现了：\n按钮的动态效果 赞赏描述 (支持国际化) 赞赏码/收款码弹出显示 (支持主题切换) 归档/时间轴 教程参考 Hugo博客时间轴中文化 —— Sulv 置顶、转载、草稿等标识 在文章页、文章列表页、归档页等界面显示置顶、转载、草稿等标识。\n置顶：文章页、文章列表页 转载：文章页、文章列表页、归档页 草稿：归档页（文章页、文章列表页主题自带图标显示） 灯箱 教程参考 Hugo 使用 Fancybox 实现图片灯箱/放大功能 —— atpx 使用 Fancybox 实现图片灯箱效果。\n结尾 除了上述内容，作者还对站点很多细节进行了优化。但由于站点搭建初期改动地方较多且频繁，很多内容并没有详尽的记载，在此就不过多赘述了。\n","permalink":"https://tofuwine.github.io/articles/site/hugo/3c96c5d2-b3f3-4a33-a2f4-0b4bb887ec97/","summary":"快速预览本站各种样式 (Hugo \u0026amp; PaperMod 主题)","title":"PaperMod 主题个性化"},{"content":" 本文迁移自原 halo 博客\n开发环境 JetBrains IDEA 2024.1 Java 17 Spring Boot 3.2.5 Maven 3.9.6 Gradle 8.7 我们以本地 hutool 5.8.26 为例。\nMaven 新建 Spring Boot 工程，使用 Maven 构建。\n存放 Jar 新建 libs 目录，将下载好的 hutool-all-5.8.26.jar 放在其中：\n引入依赖 修改 pom.xml 文件，添加 hutool 依赖：\nxml Copy code 1 2 3 4 5 6 7 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.8.26\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;system\u0026lt;/scope\u0026gt; \u0026lt;systemPath\u0026gt;${project.basedir}/libs/hutool-all-5.8.26.jar\u0026lt;/systemPath\u0026gt; \u0026lt;/dependency\u0026gt; 测试 编写测试方法：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package cn.tofuwine.spring.boot3.maven.example; import cn.hutool.core.util.StrUtil; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Test implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { String helloWorld = StrUtil.builder() .append(\u0026#34;hello\u0026#34;) .append(\u0026#34; world\u0026#34;) .toString(); System.out.println(helloWorld); } } 启动工程，控制台打印 hello world。\n打包 修改 pom.xml，添加如下：\nxml Copy code 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 添加如下配置，包含本地 Jar --\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;includeSystemScope\u0026gt;true\u0026lt;/includeSystemScope\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 项目打包后，以压缩文件形式打开生成的 jar，查看是否包含 hutool-all：（目录：BOOT-INF/lib）\n运行 Jar，查看是否能打印出 hello world：\nbash Copy code 1 java -jar .\\spring-boot-3-maven-example-0.0.1-SNAPSHOT.jar 验证结束，无问题。\nGradle 新建 Spring Boot 工程，使用 Gradle - Kotlin DSL 构建。\n存放 Jar 新建 libs 目录，将下载好的 hutool-all-5.8.26.jar 放在其中：\n引入依赖 方式一 单独引入一个 Jar 文件（Jar：hutool-all-5.8.26.jar）：\nkotlin Copy code 1 2 3 4 5 dependencies { // ... other dependencies implementation(files(\u0026#34;libs/hutool-all-5.8.26.jar\u0026#34;)) // ... other dependencies } 方式二 引入一个文件夹中的所有 Jar（文件夹： libs）：\nkotlin Copy code 1 2 3 4 5 dependencies { // ... other dependencies implementation(fileTree(mapOf(\u0026#34;dir\u0026#34; to \u0026#34;libs\u0026#34;, \u0026#34;include\u0026#34; to listOf(\u0026#34;*.jar\u0026#34;)))) // ... other dependencies } 测试 编写测试方法：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package cn.tofuwine.spring.boot3.gradle.kotlin; import cn.hutool.core.util.StrUtil; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Test implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { String helloWorld = StrUtil.builder() .append(\u0026#34;hello\u0026#34;) .append(\u0026#34; world\u0026#34;) .toString(); System.out.println(helloWorld); } } 启动工程，控制台打印 hello world。\n打包 使用 bootJar 进行打包：\n生成的 Jar 目录为 build/libs。以压缩文件形式打开生成的 jar，查看是否包含 hutool-all：（目录：BOOT-INF/lib）\n运行 Jar，查看是否能打印出 hello world：\nbash Copy code 1 java -jar .\\spring-boot-3-gradle-kotlin-0.0.1-SNAPSHOT.jar 验证结束，无问题。\n","permalink":"https://tofuwine.github.io/articles/code/java/c9102d8e-d700-45e8-aca8-8fda732ab9e5/","summary":"Spring Boot 工程引入并打包本地 Jar","title":"Spring Boot 引入本地 Jar 包"},{"content":"为了实现在 Spring Boot 工程启动后，自动执行特定方法的功能，我们可以通过以下方式实现。\nCommandLineRunner 实现 CommandLineRunner 接口，在 run 方法里面调用需要执行的方法即可。\n特定：\n方式执行时，项目已初始化完毕，可提供正常服务。 可以接受参数，不限制格式。项目启动时传入参数：java -jar example.jar arg1 arg2 arg3 可直接注入 Spring IoC 容器的 bean。 代码示例：\njava Copy code 1 2 3 4 5 6 7 8 9 10 import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; @Component public class Runner implements CommandLineRunner { @Override public void run(String... args) throws Exception { // todo your code } } ApplicationRunner 实现 ApplicationRunner 接口与实现 CommandLineRunner 接口基本一致。\n唯一不同是启动是参数的格式：CommandLineRunner 对于参数格式没有限制，ApplicationRunner 接口参数格式必须是 -key=value\n代码示例：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { // todo your code } } ApplicationListener 实现接口 ApplicationListener 方式和实现 ApplicationRunner、CommandLineRunner 接口都不影响服务，均可正常提供服务。\n为了可以直接注入 bean，监听事件一般为 ApplicationStartedEvent 或 ApplicationReadyEvent，其他事件可能无法正常注入 bean。\n代码示例:\njava ApplicationStartedEvent Copy code 1 2 3 4 5 6 7 8 9 10 11 import org.springframework.boot.context.event.ApplicationStartedEvent; import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationListener\u0026lt;ApplicationStartedEvent\u0026gt; { @Override public void onApplicationEvent(ApplicationStartedEvent event) { // todo your code } } java ApplicationReadyEvent Copy code 1 2 3 4 5 6 7 8 9 10 11 import org.springframework.boot.context.event.ApplicationReadyEvent; import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationListener\u0026lt;ApplicationReadyEvent\u0026gt; { @Override public void onApplicationEvent(ApplicationReadyEvent event) { // todo your code } } 其他方式 你也可以通过自定义 Spring Bean 初始化逻辑来实现程序启动时自动执行方法。 但一般此类方式均在项目启动过程中执行，且执行过程期间无法提供正常服务。 如使用 @PostConstruct 注解、实现 InitializingBean 接口、指定 init-method 方法等。\n执行顺序 其他方式（通过自定义 Bean 初始化逻辑）始终最先执行。 如果监听 ApplicationStartedEvent 事件，则一定会在 CommandLineRunner 和 ApplicationRunner 之前执行。 如果监听 ApplicationReadyEvent 事件，则一定会在 CommandLineRunner 和 ApplicationRunner 之后执行。 CommandLineRunner 和 ApplicationRunner 默认是 ApplicationRunner 先执行。如果指定了 @Order 则按照 @Order 大的先执行。 ","permalink":"https://tofuwine.github.io/articles/code/java/14d680b0-ef4b-402b-bd4a-99985034996f/","summary":"Spring Boot 启动后自动执行特定方法","title":"Spring Boot 启动后自动执行方法的几种方式"},{"content":"简介 Apache FreeMarker™ 是一个模板引擎：一个基于模板和变更数据生成文本输出（HTML 网页、电子邮件、配置文件、源代码等）的 Java 库。\nFreeMarker 没有其他任何依赖，仅仅依赖 Java 自身。\n最新版本：FreeMarker 2.3.32（2023-01-12）\nmaven 依赖 普通 Java 工程按如下方式引入：\nxml pom.xml Copy code 1 2 3 4 5 6 \u0026lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.freemarker\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;freemarker\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.32\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 如果是 Spring Boot 工程可以引入 spring-boot-starter-freemarker：\nxml pom.xml Copy code 1 2 3 4 5 \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-freemarker --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-freemarker\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 代码示例 普通工程 以下代码来源于 FreeMarker 官方教程：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import freemarker.template.*; import java.util.*; import java.io.*; public class Test { public static void main(String[] args) throws Exception { /* ------------------------------------------------------------------------ */ /* You should do this ONLY ONCE in the whole application life-cycle: */ /* Create and adjust the configuration singleton */ Configuration cfg = new Configuration(Configuration.VERSION_2_3_32); cfg.setDirectoryForTemplateLoading(new File(\u0026#34;/where/you/store/templates\u0026#34;)); // Recommended settings for new projects: cfg.setDefaultEncoding(\u0026#34;UTF-8\u0026#34;); cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER); cfg.setLogTemplateExceptions(false); cfg.setWrapUncheckedExceptions(true); cfg.setFallbackOnNullLoopVariable(false); cfg.setSQLDateAndTimeTimeZone(TimeZone.getDefault()); /* ------------------------------------------------------------------------ */ /* You usually do these for MULTIPLE TIMES in the application life-cycle: */ /* Create a data-model */ Map root = new HashMap(); root.put(\u0026#34;user\u0026#34;, \u0026#34;Big Joe\u0026#34;); Product latest = new Product(); latest.setUrl(\u0026#34;products/greenmouse.html\u0026#34;); latest.setName(\u0026#34;green mouse\u0026#34;); root.put(\u0026#34;latestProduct\u0026#34;, latest); /* Get the template (uses cache internally) */ Template temp = cfg.getTemplate(\u0026#34;test.ftlh\u0026#34;); /* Merge data-model with template */ Writer out = new OutputStreamWriter(System.out); temp.process(root, out); // Note: Depending on what `out` is, you may need to call `out.close()`. // This is usually the case for file output, but not for servlet output. } } Product 类如下：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Product bean; note that it must be a public class! */ public class Product { private String url; private String name; // As per the JavaBeans spec., this defines the \u0026#34;url\u0026#34; bean property // It must be public! public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } // As per the JavaBean spec., this defines the \u0026#34;name\u0026#34; bean property // It must be public! public String getName() { return name; } public void setName(String name) { this.name = name; } } FreeMarker 模板 test.ftlh 如下：\nhtml Copy code 1 2 3 4 5 6 7 8 9 10 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome ${user}!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Our latest product: \u0026lt;a href=\u0026#34;${latestProduct.url}\u0026#34;\u0026gt;${latestProduct.name}\u0026lt;/a\u0026gt;! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Spring Boot 工程 在 Spring Boot 中实现上述功能（需引入 spring-boot-starter-freemarker 依赖）：\njava Copy code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import freemarker.template.Configuration; import freemarker.template.Template; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; import java.io.OutputStreamWriter; import java.io.Writer; import java.util.HashMap; import java.util.Map; @Component public class TestRunner implements ApplicationRunner { private Configuration configuration; @Autowired public void setConfiguration(Configuration configuration) { this.configuration = configuration; } @Override public void run(ApplicationArguments args) throws Exception { Map root = new HashMap(); root.put(\u0026#34;user\u0026#34;, \u0026#34;Big Joe\u0026#34;); Product latest = new Product(); latest.setUrl(\u0026#34;products/greenmouse.html\u0026#34;); latest.setName(\u0026#34;green mouse\u0026#34;); root.put(\u0026#34;latestProduct\u0026#34;, latest); Template temp = configuration.getTemplate(\u0026#34;test.ftlh\u0026#34;); Writer out = new OutputStreamWriter(System.out); temp.process(root, out); } } Product 类（使用 Lombok)：\njava Copy code 1 2 3 4 5 6 7 import lombok.Data; @Data public class Product { private String url; private String name; } 模板文件放在 /resources/templates 目录下。\n提示 Spring Boot 默认封装了 FreeMarker 配置，我们可以直接注入使用。也可以修改 FreeMarker 配置，如缓存、模板路径、模板文件后缀等。配置节点以 spring.freemarker 为前缀。 模板语法 提示 具体详细的语法及说明应参考官方文档。 模板结构 FTL 模板由以下部分混合而成：\n文本（Text）： 文本内容会原样输出。 插值（Interpolation）：这部分的输出会被计算结果替代。插值使用 ${...}。（注：#{...} 已被弃用。See more here） FTL 标签（FTL tags）：与 HTML 标签相似，用于 FreeMarker 指令。 注释（Comments）：使用 \u0026lt;#-- 和 --\u0026gt; 来分隔。注释会被 FreeMarker 直接忽略，不会在输出内容中显示。 插值 标准格式为：${expression} 。其中 expression 可以是所有类型的表达式。如：${100 + x}\n提示 插值表达式也可以使用 [=expression] 形式。参考 See more about alternative syntaxes\u0026hellip; 表达式 直接指定值 Strings: \u0026quot;Foo\u0026quot; or 'Foo' or \u0026quot;It's \\\u0026quot;quoted\\\u0026quot;\u0026quot; or 'It\\'s \u0026quot;quoted\u0026quot;' or r\u0026quot;C:\\raw\\string\u0026quot; Numbers: 123.45 Booleans: true, false Sequences: [\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;, 123.45]; Ranges: 0..9, 0..\u0026lt;10 (or 0..!10), 0.. Hashes: {\u0026quot;name\u0026quot;:\u0026quot;green mouse\u0026quot;, \u0026quot;price\u0026quot;:150} 检索变量 顶层变量: user 从 Hashes 中检索数据: user.name, user[\u0026quot;name\u0026quot;] 从 Sequences 中检索数据: products[5] 特殊变量: .main 字符串操作 插值（或连接）: \u0026quot;Hello ${user}!\u0026quot; (or \u0026quot;Hello \u0026quot; + user + \u0026quot;!\u0026quot;) 获取一个字符: name[0] 字符串切片 Inclusive end: name[0..4], Exclusive end: name[0..\u0026lt;5], Length-based (lenient): name[0..*5], Remove starting: name[5..] Sequence 操作 连接: users + [\u0026quot;guest\u0026quot;] Sequence 切片: Inclusive end: products[20..29], Exclusive end: products[20..\u0026lt;30], Length-based (lenient): products[20..*10], Remove starting: products[20..] Hash 操作 连接: passwords + { \u0026quot;joe\u0026quot;: \u0026quot;secret42\u0026quot; } 算数运算: (x * 1.5 + 10) / 2 - y % 100 比较运算: x == y, x != y, x \u0026lt; y, x \u0026gt; y, x \u0026gt;= y, x \u0026lt;= y, x lt y, x lte y, x gt y, x gte y, \u0026hellip;etc. 逻辑操作: !registered \u0026amp;\u0026amp; (firstVisit || fromEurope) 内建函数: name?upper_case, path?ensure_starts_with('/') 方法调用: repeat(\u0026quot;What\u0026quot;, 3) 处理不存在的值: 默认值: name!\u0026quot;unknown\u0026quot; or (user.name)!\u0026quot;unknown\u0026quot; or name! or (user.name)! 检测不存在值: name?? or (user.name)?? 赋值操作: =, +=, -=, *=, /=, %=, ++, -- Local lambdas: x -\u0026gt; x + 1, (x, y) -\u0026gt; x + y 内置函数参考 字母索引 字符串内置函数 数字内置函数 日期内置函数 布尔值内置函数 序列内置函数 哈希内置函数 结点（XML） 内置函数 循环变量内置函数 独立类型内置函数 很少使用的专家内置函数 指令 标准格式是使用两种 FTL 标签：\n开始标签：\u0026lt;#directivename parameters\u0026gt; 结束标签：\u0026lt;/#directivename\u0026gt; 例如：\u0026lt;#if something\u0026gt;...\u0026lt;/#if\u0026gt;\nFTL 标签与 HTML 标签一样，必须正确嵌套。所以下面的代码是错误的，因为 if 指令既在 list 指令的嵌套内容的内部又在外部：\nhtml Copy code 1 2 3 4 5 6 7 8 \u0026lt;ul\u0026gt; \u0026lt;#list animals as animal\u0026gt; \u0026lt;li\u0026gt;${animal.name} for ${animal.price} Euros \u0026lt;#if user == \u0026#34;Big Joe\u0026#34;\u0026gt; (except for you) \u0026lt;/#list\u0026gt; \u0026lt;#-- WRONG! The \u0026#34;if\u0026#34; has to be closed first. --\u0026gt; \u0026lt;/#if\u0026gt; \u0026lt;/ul\u0026gt; 提示 FreeMarker 可以使用 [ 和 ] 替代 \u0026lt; 和 \u0026gt;。例如：[#if user == \u0026quot;Big Joe\u0026quot;]...[/#if]。\n更多信息请阅读：Miscellaneous/Alternative (square bracket) syntax.\n指令参考：\nAlphabetical index assign attempt, recover autoesc compress escape, noescape (deprecated) flush ftl function, return global if, else, elseif import include list, else, items, sep, break, continue local macro, nested, return noautoesc noparse nt outputformat setting stop switch, case, default, break t, lt, rt User-defined directive (\u0026lt;@\u0026hellip;\u0026gt;) visit, recurse, fallback 参考 FreeMarker 官方文档 FreeMarker 中文手册 附录 FreeMarker 支持的转义字符 Escape sequence Meaning \\\u0026quot; 引号 (u0022) \\' 单引号 (u0027) \\{ 起始花括号:{ \\= 等号:= (Supported since FreeMarker 2.3.28.) \\\\ 反斜杠 (u005C) \\n 换行符 (u000A) \\r 回车 (u000D) \\t 水平制表符(又称为tab) (u0009) \\b 退格 (u0008) \\f 换页 (u000C) \\l 小于号:\u0026lt; \\g 大于号:\u0026gt; \\a \u0026amp; 符:\u0026amp; \\xCode 字符的十六进制Unicode 码 (UCS code) 在 \\x 之后的 Code 是 1-4 位的十六进制码。下面这个示例中都是在字符串中放置版权符号： \u0026quot;\\xA9 1999-2001\u0026quot;， \u0026quot;\\x0A9 1999-2001\u0026quot;， \u0026quot;\\x00A9 1999-2001\u0026quot;。 如果紧跟十六进制码后一位的字符也能解释成十六进制码时， 就必须把 4 位补全，否则 FreeMarker 就会误解你的意图。\nFTL 中的保留名称 下面的这些名称不能在非方括号语法中被用作顶层变量 (比如 .vars[\u0026quot;in\u0026quot;])，因为这是 FTL 中的关键字：\ntrue：布尔值\u0026quot;true\u0026quot; false：布尔值\u0026quot;false\u0026quot; gt：比较运算符\u0026quot;大于\u0026quot; gte：比较运算符\u0026quot;大于或等于\u0026quot; lt：比较运算符\u0026quot;小于\u0026quot; lte：比较运算符\u0026quot;小于或等于\u0026quot; as：由少数指令使用 in：由少数指令使用 using：由少数指令使用 ","permalink":"https://tofuwine.github.io/articles/code/z/28095def-16f4-4aab-a023-8937447fa34f/","summary":"FreeMarker 基本语法介绍","title":"FreeMarker 基本用法"},{"content":" Tofuwine\u0026#39;s Blog 记录、 分享，仅此。 友链申请 如果您希望互相添加友链，请按如下格式在评论区留言：\n名称 Tofuwine\u0026rsquo;s Blog 网址 https://tofuwine.github.io 图标 https://tofuwine.github.io/images/favicon.svg 描述 记录、 分享，仅此。 作者将在审核通过后，将您的信息添加到友链列表。\n与此同时，如果您的站点提供了友链申请方式，作者也会按您的格式要求申请友链。\n请注意：如果您的站点有以下情况，作者将拒绝添加友链！ 您的站点含有涉黄、涉赌、涉毒、涉政等内容 您的站点含有分裂国家、激化民族/种族矛盾等内容 您的站点含有大量广告内容 ","permalink":"https://tofuwine.github.io/friend/","summary":" Tofuwine\u0026#39;s Blog 记录、 分享，仅此。 友链申请 如果您希望互相添加友链，请按如下格式在评论区留言：\n名称 Tofuwine\u0026rsquo;s Blog 网址 https://tofuwine.github.io 图标 https://tofuwine.github.io/images/favicon.svg 描述 记录、 分享，仅此。 作者将在审核通过后，将您的信息添加到友链列表。\n与此同时，如果您的站点提供了友链申请方式，作者也会按您的格式要求申请友链。\n请注意：如果您的站点有以下情况，作者将拒绝添加友链！ 您的站点含有涉黄、涉赌、涉毒、涉政等内容 您的站点含有分裂国家、激化民族/种族矛盾等内容 您的站点含有大量广告内容 ","title":"🤝 友链"},{"content":"简介 本站仅作为个人博客、笔记使用，转载内容会显著标明出处及链接。\n名称 Tofuwine\u0026rsquo;s Blog 网址 https://tofuwine.github.io 图标 https://tofuwine.github.io/images/favicon.svg 描述 记录、 分享，仅此。 License 本站原创内容采用 CC BY-NC 4.0 许可，请在转载时标注作者和原文链接。\n相关技术 \u0026amp; 软件 本站完全托管 Github。\n以下为本站所用技术/软件，内容不分先后顺序:\nHugo PaperMod GitHub Pages GitHub Actions PicGo Typora IntelliJ IDEA Fancybox Giscus 搬迁 原站 (halo + higan) 将逐步迁移至本站。\n","permalink":"https://tofuwine.github.io/about/","summary":"简介 本站仅作为个人博客、笔记使用，转载内容会显著标明出处及链接。\n名称 Tofuwine\u0026rsquo;s Blog 网址 https://tofuwine.github.io 图标 https://tofuwine.github.io/images/favicon.svg 描述 记录、 分享，仅此。 License 本站原创内容采用 CC BY-NC 4.0 许可，请在转载时标注作者和原文链接。\n相关技术 \u0026amp; 软件 本站完全托管 Github。\n以下为本站所用技术/软件，内容不分先后顺序:\nHugo PaperMod GitHub Pages GitHub Actions PicGo Typora IntelliJ IDEA Fancybox Giscus 搬迁 原站 (halo + higan) 将逐步迁移至本站。","title":"🧑‍💻 关于"}]