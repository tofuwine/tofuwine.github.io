[{"content":" 温馨提示 2024-05-17\n本站基于 Hugo-PaperMod 扩展实现的个性化功能 \u0026amp; 样式修改教程将会逐步开放。\n简介 PaperMod-PE (Forked from Hugo-PaperMod)， 是本站基于 PaperMod 主题修改后的开源版本。\nPaperMod-PE 兼容 Hugo-PaperMod (2024-05-15 前) 的功能，参考 Hugo-PaperMod Wiki。\ntofuwine/PaperMod-PE 快速开始 安装 Hugo。参考文档：Hugo Docs\u0026rsquo;s - Quick Start (需要 Hugo 版本 \u0026gt;= v0.125.3)\n创建 Hugo Site\npowershell 1 2 # 将下面 MySite 替换为你的网站名 hugo new site MySite --format yml 更多命令参考：Hugo Docs\u0026rsquo;s - hugo new site command\n启用 Git powershell 1 2 3 cd MySite git init . git add . 安装 PaperMod-PE 主题 powershell 1 git submodule add --depth=1 https://github.com/tofuwine/PaperMod-PE.git themes/PaperMod-PE 修改 Hugo 配置文件： yaml 1 theme: PaperMod-PE 示例工程 PaperMod-PE-Demo：https://github.com/tofuwine/PaperMod-PE-Demo\n示例工程站点：https://tofuwine.github.io/PaperMod-PE-Demo/\n代码块 官方文档：Syntax highlighting\nPaperMod-PE 代码块扩展实现了折叠代码块，自定义标题，自定义显示语言等功能。\n同时重写了代码块样式，PaperMod 的相关参数将会失效。例如，现在复制按钮是内置的，你不能通过参数 ShowCodeCopyButtons 决定显示/隐藏复制按钮。\n标准样式 java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 代码：\nmarkdown 1 2 3 4 5 6 7 8 ```java public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } ``` 自定义标题 java io.github.tofuwine.main.HelloHugo.java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 代码：\nmarkdown 1 2 3 4 5 6 7 8 ```java { title=\u0026#34;io.github.tofuwine.main.HelloHugo.java\u0026#34; } public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } ``` 自定义起始行数 \u0026amp; 高亮指定行 如果希望在代码块中高亮显示某一行或几行 或 修改代码块显示的起始行数，你可以按如下方式：\nmarkdown 1 2 3 4 5 6 7 8 9 10 11 12 ```go { hl_lines=\u0026#34;4 6 8\u0026#34;, lineNoStart=100 } func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \u0026#34;go\u0026#34;: return strings.Title case \u0026#34;chicago\u0026#34;: return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } ``` 效果：\ngo 100 101 102 103 104 105 106 107 108 109 func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \u0026#34;go\u0026#34;: return strings.Title case \u0026#34;chicago\u0026#34;: return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } 其中：\nhl_lines: 表示需要高亮的行数，你可以指定多行，用空格分隔。\n如果连续多行，可以使用 -。例如 hl_lines=\u0026quot;4-6 8\u0026quot;，即高亮 4、5、6、8 行。 lineNoStart：表示代码块显示的起始行数 这些都是 Hugo 中定义好的属性，你可以查看官方文档获取更多内容。\n折叠代码块 通过 fold 属性，你可以定义代码块是否折叠。\n对于过长或不是必须展示的代码，你可设置 fold=true，那么它将默认折叠起来。\njava HelloHugo.java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 代码：\nmarkdown 1 2 3 4 5 6 7 8 ```java {title=HelloHugo.java fold=true} public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } ``` 自定义显示语言 此方式是为了避免渲染冲突（如 mermaid，你可能需要此方式才能正确展示语言为 mermaid）。\n如果希望在代码块中展示 mermaid 的代码，如果按正常 markdown 写法：\nmarkdown 1 2 3 4 5 6 7 ```mermaid flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` 会被渲染如下：\nflowchart LR A[Hard] --\u003e|Text| B(Round) B --\u003e C{Decision} C --\u003e|One| D[Result 1] C --\u003e|Two| E[Result 2] 你可以通过 lang 属性，修改代码如下：\nmarkdown 1 2 3 4 5 6 7 ```markdown {lang=mermaid} flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` 来达到以下效果：\nmermaid 1 2 3 4 5 flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] 上述方式代码高亮语法仍是 markdown。如希望高亮显示为自定义语言，需要额外添加属性 force=true，如下：\nmarkdown 1 2 3 4 5 6 7 ```markdown {lang=mermaid force=true} flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` 赞赏 功能描述 在章末显示 \u0026lt;赞赏\u0026gt; 按钮，点击按钮后显示微信/支付宝收款码。\n样式预览 可前往本文章末预览。\n配置 yaml 1 2 3 4 5 6 7 8 9 10 11 param: # 启用赞赏功能 enableReward: true # 赞赏按钮显示字符 (可在文章 `frontmatter` 中设置)，默认为赞赏图标 # rewardButton: 赞赏 # 赞赏描述 (可在文章 `frontmatter` 中设置) rewardDescription: 如果本文对你有所帮助，可以点击上方按钮请作者喝杯咖啡！ # 设置微信收款码图片 WechatPay: images/wechat_pay.jpg # 设置支付宝收款码图片 Alipay: images/alipay.jpg 评论 📢 攻略已发布: PaperMod 集成 Giscus 评论\n功能描述 为文章添加评论区功能。PaperMod-PE 默认集成 giscus 评论功能。\n配置 评论区标题 \u0026amp; 副标题 设置方式如下：\nyaml 1 2 3 4 5 6 7 params: # 启用评论 comments: true # 评论区标题 (可在文章 `frontmatter` 中设置) discussionTitle: 欢迎来到评论区 # 评论区子标题 (可在文章 `frontmatter` 中设置) discussionSubtitle: 感谢您的耐心阅读！来选个表情，或者留个评论吧！ Giscus 前往 giscus.app，获取相关配置。\nyaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 params: # giscus 评论参数 giscus: repo: \u0026#34;\u0026lt;your repository\u0026gt;\u0026#34; repoId: \u0026#34;\u0026lt;your repo id\u0026gt;\u0026#34; category: \u0026#34;Announcements\u0026#34; categoryId: \u0026#34;\u0026lt;your category id\u0026gt;\u0026#34; mapping: \u0026#34;pathname\u0026#34; strict: \u0026#34;0\u0026#34; reactionsEnabled: \u0026#34;1\u0026#34; emitMetadata: \u0026#34;0\u0026#34; inputPosition: \u0026#34;top\u0026#34; lightTheme: \u0026#34;light\u0026#34; darkTheme: \u0026#34;dark\u0026#34; lang: \u0026#34;zh-CN\u0026#34; 样式预览 前往本文底部预览评论区。\nFancybox 功能描述 启用图片灯箱预览。\n配置 按如下配置启用 Fancybox 灯箱。\nyaml 1 2 3 param: # 启用 Fancybox 灯箱 enableFancybox: true 数学公式 功能描述 渲染数学公式，同时支持内联显示和块显示。PaperMod-PE 支持 KaTex 和 MathJax 两种渲染方式。\n样式预览 内联显示 两数和的平方，等于它们的平方和加上它们的积的2倍。 即：\\$(a+b)^2=a^2+2ab+b^2\\$\n代码：\nmarkdown 1 两数和的平方，等于它们的平方和加上它们的积的2倍。 即：\\$(a+b)^2=a^2+2ab+b^2\\$ 块显示 $$ \\begin{aligned} KL(\\hat{y} || y) \u0026= \\sum_{c=1}^{M}\\hat{y}_c \\log{\\frac{\\hat{y}_c}{y_c}} \\\\ JS(\\hat{y} || y) \u0026= \\frac{1}{2}(KL(y||\\frac{y+\\hat{y}}{2}) + KL(\\hat{y}||\\frac{y+\\hat{y}}{2})) \\end{aligned} $$ 代码：\nmarkdown 1 2 3 4 5 6 $$ \\begin{aligned} KL(\\hat{y} || y) \u0026amp;= \\sum_{c=1}^{M}\\hat{y}_c \\log{\\frac{\\hat{y}_c}{y_c}} \\\\ JS(\\hat{y} || y) \u0026amp;= \\frac{1}{2}(KL(y||\\frac{y+\\hat{y}}{2}) + KL(\\hat{y}||\\frac{y+\\hat{y}}{2})) \\end{aligned} $$ 更多预览，请参考：Markdown 数学公式\n配置 按如下方式启用数学公式渲染：\nyaml 1 2 3 4 5 params: # 启用数学公式渲染 enableMath: true # 数学公式渲染方式: `katex` or `mathjax` mathematicsRenderer: mathjax 悬浮按钮 PaperMod-PE 支持三种悬浮按钮：回到顶部 (Go to Top)、前往评论区 (Go to Comment)、切换主题 (Theme toggle)。 你可以在屏幕右下角体验这些悬浮按钮。\n前往评论区 (Go to comment) 功能描述 快速跳转到评论区。\n配置 yaml 1 2 3 params: # 悬浮按钮 —— Go to Comment enableScrollToComment: true 切换主题 (Theme toggle) 功能描述 切换页面主题 (light / dark)。\n配置 yaml 1 2 3 params: # 悬浮按钮 —— Theme Toggle enableThemeToggleFloat: true 回到顶部 (Go to top) 功能描述 快速跳转到页面顶部。\n配置 yaml 1 2 3 params: # 悬浮按钮 —— Go to Top enableScrollToTop: true 文章版权声明 📢 攻略已发布: PaperMod 添加文章版权声明\n在章末显示原创内容版权信息 or 转载内容的原文信息。\n原创内容 可为原创内容显示版权信息，同时显示文章标题(含作者名) \u0026amp; 文章链接。\n配置 可通过 config.yml 配置默认 license 信息：\nyaml 1 2 3 4 5 6 7 params: # 文章作者 (PaperMod 主题参数) author: tofuwine # 版本链接 licenseLink: \u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; # 版本显示名 licenseName: \u0026#34;CC BY-NC 4.0\u0026#34; 也可在文章 frontmatter 中指定 license 信息：\nmarkdown 1 2 3 4 5 --- author: tofuwine licenseLink: \u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; licenseName: \u0026#34;CC BY-NC 4.0\u0026#34; --- 样式预览 你可以在本文章末预览样式。\n转载内容 为转载内容显示原文标题、作者、链接以及侵权联系方式。\n配置 在 frontmatter 中添加如下配置：\nmarkdown 1 2 3 4 5 6 7 --- reposted: true repostedTitle: \u0026#34;PaperMod-PE Documents\u0026#34; repostedAuthor: \u0026#34;tofuwine\u0026#34; repostedLink: \u0026#34;https://www.tofuwine.cn/articles/site/hugo/041e0ff6-f9a1-4212-a1de-5af6c2c7568a/\u0026#34; contactEmail: tofuwine@outlook.com --- 其中联系方式也可在 config.yml 进行全局配置：\nyaml 1 2 params: contactEmail: tofuwine@outlook.com 样式预览 前往转载文章 Linux 文件系统的组成 的章末预览样式。\nTypeIt 主页副标题使用 TypeIt 动态效果。hugo 配置文件增加如下配置：\nyaml 1 2 params: enableTypeIt: true 说明：当前仅支持主页副标题，其他页面无效果。\nCloudflare Web Analytics 通过以下配置开启 Cloudflare Web Analytics 的支持：\nyaml 1 2 3 4 params: analytics: cloudflare: WebAnalyticsToken: \u0026#34;your_token\u0026#34; Token 获取方式：\n前往 Cloudflare Dashboard 找到 分析和日志 \u0026gt; Web Analytics，添加你的站点会获得一个 JS 片段，拿到其中的 token 值。 如果使用 Cloudflare Pages 部署，可在你的 Pages 管理界面 管理 \u0026gt; Web Analytics 启用 Cloudflare Web Analytics，而无需进行上述配置。\nBaidu Site Verification (Preview) 预览功能。\n作者按百度官方相关文档未能成功验证，可能跟站点部署在 Cloudflare Pages 有关？\n通过以下配置添加百度网站验证：\nyaml 1 2 3 4 params: analytics: baidu: SiteVerificationTag: \u0026#34;your_tag\u0026#34; 自定义页面 友链 添加 \u0026lt;友链\u0026gt; 页面\n创建 friend.md 文件，内容参考如下：\nmarkdown content/friend.md 1 2 3 4 5 6 7 8 9 10 title: \u0026#34;🤝 友链\u0026#34; layout: \u0026#34;friend\u0026#34; hideMeta: true showBreadCrumbs: false ShowToc: false discussionTitle: 👇 申请友链 👇 discussionSubtitle: 在下方评论区留下你的链接吧! hideRewardSubtitle: true rewardButton: 赞 searchHidden: true 友链页面链接：/friend/\n添加友链信息 通过 Shortcode friend 进行友链的添加，在 friend.md 中添加如下内容，即可添加一条友链信息。\nmarkdown 1 {{\u0026lt; friend name=\u0026#34;Tofuwine\u0026#39;s Blog\u0026#34; url=\u0026#34;https://www.tofuwine.cn\u0026#34; logo=\u0026#34;https://www.tofuwine.cn/images/profile.png\u0026#34; description=\u0026#34;记录、 分享，仅此。\u0026#34; \u0026gt;}} 关于 创建 about.md 文件，内容参考如下：\nmarkdown content/about.md 1 2 3 4 5 6 7 8 9 10 11 12 13 --- title: \u0026#34;🧑‍💻 关于\u0026#34; layout: \u0026#34;about\u0026#34; hideMeta: true showBreadCrumbs: false ShowToc: false comments: true discussionTitle: 👇 畅所欲言 👇 discussionSubtitle: hideRewardSubtitle: true rewardButton: 赞 searchHidden: true --- 关于页面链接：/about/\n瞬间 📢 攻略已发布: Hugo 添加瞬间页\n创建 moments/_index.md 文件，内容参考如下：\nmarkdown content/moments/_index.md 1 2 3 4 5 6 7 8 9 10 11 12 --- title: \u0026#34;🌟 瞬间\u0026#34; layout: \u0026#34;moments\u0026#34; DateFormat: 2006-01-02 03:04 build: render: always cascade: - build: list: local publishResources: false render: never --- 瞬间页面链接：/moments/。\nShortcode admonition note 样式：\nnote admonition - note 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=note title=note open=true \u0026gt;}} admonition - note {{\u0026lt; /admonition \u0026gt;}} abstract 样式：\nabstract admonition - abstract 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=abstract title=abstract open=true \u0026gt;}} admonition - abstract {{\u0026lt; /admonition \u0026gt;}} info 样式：\ninfo admonition - info 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=info title=info open=true \u0026gt;}} admonition - info {{\u0026lt; /admonition \u0026gt;}} tip 样式：\ntip admonition - tip 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=tip title=tip open=true \u0026gt;}} admonition - tip {{\u0026lt; /admonition \u0026gt;}} success 样式：\nsuccess admonition - success 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=success title=success open=true \u0026gt;}} admonition - success {{\u0026lt; /admonition \u0026gt;}} question 样式：\nquestion admonition - question 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=question title=question open=true \u0026gt;}} admonition - question {{\u0026lt; /admonition \u0026gt;}} warning 样式：\nwarning admonition - warning 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=warning title=warning open=true \u0026gt;}} admonition - warning {{\u0026lt; /admonition \u0026gt;}} failure 样式：\nfailure admonition - failure 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=failure title=failure open=true \u0026gt;}} admonition - failure {{\u0026lt; /admonition \u0026gt;}} danger 样式：\ndanger admonition - danger 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=danger title=danger open=true \u0026gt;}} admonition - danger {{\u0026lt; /admonition \u0026gt;}} bug 样式：\nbug admonition - bug 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=bug title=bug open=true \u0026gt;}} admonition - bug {{\u0026lt; /admonition \u0026gt;}} example 样式：\nexample admonition - example 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=example title=example open=true \u0026gt;}} admonition - example {{\u0026lt; /admonition \u0026gt;}} quote 样式：\nquote admonition - quote 代码：\nmarkdown 1 2 3 {{\u0026lt; admonition type=quote title=quote open=true \u0026gt;}} admonition - quote {{\u0026lt; /admonition \u0026gt;}} hl (Deprecated) Deprecated：未来将会删除。\nhugo 0.126.0 起支持 inserted text, mark text, subscript, and superscript。\n查看官网介绍：extras-extension\n文本高亮。\n样式：\nThis is a highlight text. 代码：\nmarkdown 1 2 3 {{\u0026lt; hl \u0026gt;}} This is a highlight text. {{\u0026lt; /hl \u0026gt;}} git (Preview) 显示 git 代码仓库。\n语法：(以 Gitee 平台的 dromara/hutool 仓库为例)\nmarkdown 1 {{\u0026lt; git platform=\u0026#34;gitee\u0026#34; repo=\u0026#34;dromara/hutool\u0026#34; \u0026gt;}} 更方便写法：\nmarkdown 1 {{\u0026lt; git \u0026#34;https://gitee.com/dromara/hutool\u0026#34; \u0026gt;}} 目前支持的平台：\ngithub gitee GitHub Shortcode：\nmarkdown 1 {{\u0026lt; git platform=\u0026#34;github\u0026#34; repo=\u0026#34;dromara/hutool\u0026#34; \u0026gt;}} 渲染结果：\ndromara/hutool Gitee Shortcode：\nmarkdown 1 {{\u0026lt; git platform=\u0026#34;gitee\u0026#34; repo=\u0026#34;dromara/hutool\u0026#34; \u0026gt;}} 渲染结果：\ndromara/hutool 特别说明 这是作者参考 halo 插件 Vditor 编辑器 实现的。目前为预览功能，仍可能存在问题。。 为缓存避免频繁请求 API 接口，初次请求结果会缓存在 localStorage 中，有效期 1 小时（过期并不会删除）。 未完善异常处理。因网络等原因导致请求失败后，可能会导致样式问题。 (2024.05.20 起 支持异常样式)。 tip (Preview) 用于替代 admonition 的简码。目前支持以下类型：\ndefault markdown 1 2 3 {{\u0026lt; tip \u0026gt;}} tip content {{\u0026lt; /tip \u0026gt;}} 效果如下：\ntip content warning markdown 1 2 3 {{\u0026lt; tip warning \u0026gt;}} warning content {{\u0026lt; /tip \u0026gt;}} 效果如下：\nwarning content FAQ 如何更新主题 使用如下命令更新主题：\npowershell 1 git submodule update --init --recursive ","permalink":"https://tofuwine.github.io/posts/041e0ff6/","summary":"Documentation for PaperMod-PE","title":"PaperMod-PE Documents"},{"content":"前言 之前使用 Halo 时，可以通过插件实现瞬间页面，类似发朋友圈一样。对我来说，一些简单的内容又不想单独作为一篇文章，瞬间页可以很好的满足需求。 但是转用 hugo 后，搜索了很多教程和优秀的博主站点都没有该功能。抄不了那没办法只能硬着头皮自己码代码了。\n如果你不想了解实现过程，可直接跳转到 完整代码，直接复制完整代码。 如果你使用的是本站开源主题 PaperMod-PE 可直接跳转 使用教程。\n效果展示 你可以前往 🌟 瞬间 预览本站最新的实现效果。\n基本思路 目标：使用一个文件夹例如 moments 来作为瞬间页内容的来源，每条瞬间一个 md 文件。 页面模板 为了展示瞬间的内容，第一步新建一个瞬间页面模板，来容纳每一条瞬间。\n基于我们的目标，需要将多个 md 文件内容容纳到一个页面，并且考虑到未来内容很多时的还需要分页展示，所以这里采用 Section page templates。\n根据文档 Section pages 可知，我们可以使用多种形式来创建这个界面模板。我们这里以 layouts/section/list.html 形式为例。 创建 list.html，路径为 layouts/moments/list.html，瞬间界面结构在此定义。\n本站瞬间界面结构参考微信朋友圈实现。\nBuild options 基于我们的目标，将多个 md 文件整合到一个界面后，那么就不应该在单独渲染每一条瞬间原本的界面，否则会污染整个站点的结构（如 site.Pages 包含很多瞬间的内容，这不是我们希望看到的）。 通过查阅官方文档，了解到 Hugo Build options。这也是我们实现这个功能的一个核心。\n根据文档内容，我们可以创建 _index.md:\nmarkdown content/moments/_index.md 1 2 3 4 5 6 7 8 9 10 --- title: \u0026#34;🌟 瞬间\u0026#34; build: render: always cascade: - build: list: local publishResources: false render: never --- 这样我们重启 hugo，就可以访问 http://localhost:1313/moments/ 界面了，并且 content/moments 目录下所有 md 都不会被渲染成页面。\n评论 本文采用 Giscus。如果你也希望集成 Giscus，可参考本站教程：PaperMod 集成 Giscus 评论 根据 Giscus 官方文档 可知，我们可以通过修改参数 data-mapping=\u0026quot;specific\u0026quot; 并指定 data-term， 来自定义页面 ↔️ discussion 映射关系。 这使得我们能为每个瞬间实现评论功能。\n由于 giscus 实现方式，没办法同时显示所有瞬间评论内容，因此采用更简单粗暴的方式，用户主动点击右下角评论按钮再展示评论区。 通过在页面模板中，将每个瞬间的 slug 赋值到评论按钮的属性 (data-slug) 上，然后通过这个值在 JS 中动态生成每个瞬间的 data-term。\n如果你的站点使用的不是 Giscus，你可以参考你的评论系统的官方文档来修改评论按钮的点击方法 function showComment(element)。\n使用教程 PaperMod-PE 请先更新到最新版本。\n创建 _index.md: (内容参考如下)\nmarkdown content/moments/_index.md 1 2 3 4 5 6 7 8 9 10 11 --- title: \u0026#34;🌟 瞬间\u0026#34; DateFormat: 2006-01-02 03:04 build: render: always cascade: - build: list: local publishResources: false render: never --- DateFormat：修改瞬间显示的时间格式。你可以参考 官方文档 自定义你的时间格式。 如果未配置此项，则默认使用站点的 DateFormat。即：（以下为示例）\nyaml hugo.yml 1 2 params: DateFormat: 2006-01-02 这样你就可以访问瞬间界面 /moments。\n如何新增一条瞬间 在 moments 目录下创建一个 md 文档，frontmatter 参考如下：\nmarkdown 1 2 3 4 5 6 7 8 --- date: 2024-03-13T09:05:00+08:00 slug: \u0026#34;change to your moment slug\u0026#34; tags: - Apple draft: false --- enter your moment content. 参数说明：\ndate 是可选的。在瞬间左下角显示的时间。（建议显示指定该值，如果你未配置此项，也可能显示时间，因为赋值方式为 .Param \u0026quot;date\u0026quot;） slug 是必须的。它涉及到与评论绑定，建议使用 UUID 或随机数来保证不重复。 tags 是可选的。标记这条瞬间的标签，可以为多个。（注意，此标签与文章标签无关） hideComment 是可选的。如果为 true 则不会在这个瞬间的右下角显示评论按钮。 完整代码 最新源码请参考 PaperMod-PE moments.html html layouts/moments/list.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 {{- define \u0026#34;main\u0026#34; }} {{- $paginator := .Paginate .Pages }} {{ $dateformat := .Params.DateFormat }} \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; {{- (printf \u0026#34;%s\u0026amp;nbsp;\u0026#34; .Title ) | htmlUnescape -}} \u0026lt;/h1\u0026gt; {{- if .Description }} \u0026lt;div class=\u0026#34;post-description\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pe-moments\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{- range $moment := $paginator.Pages }} {{- if .Content }} \u0026lt;li class=\u0026#34;pe-moment\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ site.Params.label.icon }}\u0026#34; alt=\u0026#34;{{ site.Params.author }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pe-moment-body\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pe-moment-content\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; {{ if .Params.tags }} \u0026lt;div class=\u0026#34;pe-moment-tags\u0026#34;\u0026gt; {{- range $index, $tag := (.Params.tags) }} \u0026lt;span class=\u0026#34;pe-moment-tag\u0026#34;\u0026gt;{{ $tag }}\u0026lt;/span\u0026gt; {{- end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;pe-moment-bottom\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pe-moment-time\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ $moment.Param \u0026#34;date\u0026#34; | time.Format (default site.Params.DateFormat $dateformat) }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{ if not .Params.hideComment }} \u0026lt;button class=\u0026#34;pe-moment-comment-btn\u0026#34; onclick=\u0026#34;showComment(this)\u0026#34; data-slug=\u0026#34;{{ $moment.Param \u0026#34;slug\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M281.535354 387.361616c-31.806061 0-57.664646 26.763636-57.664647 59.733333 0 32.969697 25.858586 59.733333 57.664647 59.733334s57.664646-26.763636 57.664646-59.733334c0-33.09899-25.858586-59.733333-57.664646-59.733333z m230.529292 0c-31.806061 0-57.664646 26.763636-57.664646 59.733333 0 32.969697 25.729293 59.733333 57.664646 59.733334 31.806061 0 57.535354-26.763636 57.535354-59.733334 0-33.09899-25.858586-59.733333-57.535354-59.733333z m230.4 0c-31.806061 0-57.664646 26.763636-57.664646 59.733333 0 32.969697 25.858586 59.733333 57.664646 59.733334s57.664646-26.763636 57.664647-59.733334c-0.129293-33.09899-25.858586-59.733333-57.664647-59.733333z m115.2-270.222222H166.335354c-63.612121 0-115.2 53.527273-115.2 119.59596v390.981818c0 65.939394 52.751515 126.836364 117.785858 126.836363h175.579798c30.513131 32.581818 157.220202 149.979798 157.220202 149.979798 5.559596 5.818182 14.739394 5.818182 20.29899 0 0 0 92.832323-91.410101 153.212121-149.979798h179.717172c65.034343 0 117.785859-60.89697 117.785859-126.836363V236.606061c0.129293-65.939394-51.458586-119.466667-115.070708-119.466667z m57.535354 510.577778c0 32.969697-27.668687 67.620202-60.250505 67.620202H678.335354c-21.462626 0-40.727273 21.979798-40.727273 21.979798l-124.121212 114.941414-124.121212-114.941414s-23.660606-21.979798-43.830303-21.979798H168.921212c-32.581818 0-60.250505-34.650505-60.250505-67.620202V236.606061c0-32.969697 25.729293-59.733333 57.664647-59.733334h691.329292c31.806061 0 57.535354 26.763636 57.535354 59.733334v391.111111z m0 0\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; {{- if gt $paginator.TotalPages 1 }} \u0026lt;footer class=\u0026#34;page-footer\u0026#34;\u0026gt; \u0026lt;nav class=\u0026#34;pagination\u0026#34;\u0026gt; {{- if $paginator.HasPrev }} \u0026lt;a class=\u0026#34;prev\u0026#34; href=\u0026#34;{{ $paginator.Prev.URL | absURL }}\u0026#34;\u0026gt; {{ i18n \u0026#34;prev_page\u0026#34; }} {{- if (.Param \u0026#34;ShowPageNums\u0026#34;) }} {{- sub $paginator.PageNumber 1 }}/{{ $paginator.TotalPages }} {{- end }} \u0026lt;/a\u0026gt; {{- end }} {{- if $paginator.HasNext }} \u0026lt;a class=\u0026#34;next\u0026#34; href=\u0026#34;{{ $paginator.Next.URL | absURL }}\u0026#34;\u0026gt; {{- i18n \u0026#34;next_page\u0026#34; }} {{- if (.Param \u0026#34;ShowPageNums\u0026#34;) }} {{- add 1 $paginator.PageNumber }}/{{ $paginator.TotalPages }} {{- end }} \u0026lt;/a\u0026gt; {{- end }} \u0026lt;/nav\u0026gt; \u0026lt;/footer\u0026gt; {{- end }} \u0026lt;script\u0026gt; function showComment(element) { const slug = element.getAttribute(\u0026#39;data-slug\u0026#39;); const commentElement = document.getElementById(slug); if (commentElement) { commentElement.remove(); return; } const comments = document.getElementsByClassName(\u0026#34;pe-moment-comment\u0026#34;); if (comments) { for (let comment of comments) { comment.remove(); } } const momentBody = element.closest(\u0026#39;.pe-moment-body\u0026#39;); let giscusAttributes = { \u0026#34;src\u0026#34;: \u0026#34;https://giscus.app/client.js\u0026#34;, \u0026#34;data-repo\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repo }}\u0026#34;, \u0026#34;data-repo-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repoId }}\u0026#34;, \u0026#34;data-category\u0026#34;: \u0026#34;{{ .Site.Params.giscus.category }}\u0026#34;, \u0026#34;data-category-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.categoryId }}\u0026#34;, \u0026#34;data-mapping\u0026#34;: \u0026#34;{{ .Site.Params.giscus.mapping | default \u0026#34;pathname\u0026#34; }}\u0026#34;, \u0026#34;data-term\u0026#34;: \u0026#34;moments/\u0026#34; + slug, \u0026#34;data-strict\u0026#34;: \u0026#34;{{ .Site.Params.giscus.strict | default \u0026#34;0\u0026#34; }}\u0026#34;, \u0026#34;data-reactions-enabled\u0026#34;: \u0026#34;{{ .Site.Params.giscus.reactionsEnabled | default \u0026#34;1\u0026#34; }}\u0026#34;, \u0026#34;data-emit-metadata\u0026#34;: \u0026#34;{{ .Site.Params.giscus.emitMetadata | default \u0026#34;0\u0026#34; }}\u0026#34;, \u0026#34;data-input-position\u0026#34;: \u0026#34;{{ .Site.Params.giscus.inputPosition | default \u0026#34;bottom\u0026#34; }}\u0026#34;, \u0026#34;data-theme\u0026#34;: getStoredTheme(), \u0026#34;data-lang\u0026#34;: \u0026#34;{{ .Site.Params.giscus.lang | default \u0026#34;en\u0026#34; }}\u0026#34;, \u0026#34;crossorigin\u0026#34;: \u0026#34;anonymous\u0026#34;, \u0026#34;async\u0026#34;: \u0026#34;\u0026#34;, }; const commentDiv = document.createElement(\u0026#39;div\u0026#39;); commentDiv.id = slug; commentDiv.className = \u0026#34;pe-moment-comment\u0026#34;; // 动态创建 giscus script let giscusScript = document.createElement(\u0026#34;script\u0026#34;); Object.entries(giscusAttributes).forEach( ([key, value]) =\u0026gt; giscusScript.setAttribute(key, value)); commentDiv.appendChild(giscusScript); momentBody.appendChild(commentDiv); } const getStoredTheme = () =\u0026gt; localStorage.getItem(\u0026#34;pref-theme\u0026#34;) === \u0026#34;dark\u0026#34; ? \u0026#34;{{ .Site.Params.giscus.darkTheme }}\u0026#34; : \u0026#34;{{ .Site.Params.giscus.lightTheme }}\u0026#34;; const setGiscusTheme = () =\u0026gt; { const sendMessage = (message) =\u0026gt; { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (iframe) { iframe.contentWindow.postMessage({giscus: message}, \u0026#39;https://giscus.app\u0026#39;); } } sendMessage({setConfig: {theme: getStoredTheme()}}) } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { // 页面主题变更后，变更 giscus 主题 const themeSwitcher = document.querySelector(\u0026#34;#theme-toggle\u0026#34;); if (themeSwitcher) { themeSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } // 本站悬浮按钮，如果你没有则删除以下内容 const themeFloatSwitcher = document.querySelector(\u0026#34;#theme-toggle-float\u0026#34;); if (themeFloatSwitcher) { themeFloatSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } }); \u0026lt;/script\u0026gt; {{- end }}{{/* end main */}} moments.css css assets/css/extended/moments.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 .list { background: #ffffff; } .page-header { margin: 0 auto 1rem; display: flex; align-items: center; justify-content: center; } .pe-moment { padding: 2rem 0; gap: .8rem; align-items: flex-start; display: flex; border-bottom: 1px; } .pe-moments li { border-bottom: 1px solid #d6d6d6; } .pe-moments img { width: 4.8rem; height: 4.8rem; border-radius: 50%; margin: 0; } .pe-moments ul { list-style: none; margin: 0; padding: 0; } .pe-moment-body { margin-left: 2.4rem; width: 100%; overflow: hidden; } .pe-moment-content { margin-bottom: 1.6rem; } .pe-moment-tag { display: inline-block; padding: 0.25em 0.6em; font-size: 0.875em; line-height: 1; color: #999999; /* 暗色字体 */ background-color: #f0f0f0; /* 浅色背景 */ border-radius: 0.5rem; } .dark .pe-moment-tag { background-color: #333; /* 暗色背景 */ } .pe-moment-bottom { margin-top: 1.2rem; display: flex; align-items: center; } .pe-moment-time { display: inline-block; color: #999999; } .pe-moment-comment-btn svg { width: 2rem; height: 2rem; display: inline-block; vertical-align: 0.15em; fill: #fff; } .pe-moment-comment-btn { margin-left: auto; display: flex; align-items: center; background: rgb(214, 214, 214); border-radius: .5rem; padding: .2rem 1rem; } .dark .pe-moment-comment-btn { background: rgb(65, 66, 68); } .pe-moment-comment-btn:hover { background-color: #e26c56; border-radius: .5rem; } .pe-moment-comment { margin-top: .2rem; } .page-footer { margin-top: 2rem; } ","permalink":"https://tofuwine.github.io/posts/d44c2e7d/","summary":"Hugo 添加瞬间页面","title":"Hugo 添加瞬间页"},{"content":"概要 在文章章末添加对文章的版权声明，如果为转载文章，则在章末显示转载原文信息。\ncopyright 界面 创建 copyright.html 文件：\nhtml layouts/partials/copyright.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;pe-copyright\u0026#34;\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;blockquote\u0026gt; {{ if .Param \u0026#34;reposted\u0026#34; }} \u0026lt;p\u0026gt;本文为转载内容，原文信息如下：\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;原文标题：{{- .Param \u0026#34;repostedTitle\u0026#34; -}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;原文作者：{{- .Param \u0026#34;repostedAuthor\u0026#34; -}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;原文链接：\u0026lt;a href=\u0026#34;{{- .Param \u0026#34;repostedLink\u0026#34; -}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{- .Param \u0026#34;repostedLink\u0026#34; -}}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;如有侵权，请\u0026lt;a href=\u0026#34;mailto://{{ .Param \u0026#34;contactEmail\u0026#34; }}\u0026#34;\u0026gt;联系作者\u0026lt;/a\u0026gt;删除。\u0026lt;/p\u0026gt; {{ else }} \u0026lt;p\u0026gt;本文为原创内容，版权归作者所有。如需转载，请在文章中声明本文标题及链接。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;文章标题：{{ .Title }} —— {{ .Param \u0026#34;author\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;文章链接：\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{ .Permalink }}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;许可协议：\u0026lt;a href=\u0026#34;{{- .Param \u0026#34;licenseLink\u0026#34; -}}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{- .Param \u0026#34;licenseName\u0026#34; -}}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; {{ end }} \u0026lt;/blockquote\u0026gt; \u0026lt;/div\u0026gt; 样式 添加版权信息区域样式。创建 copyright.css 文件：\ncss assets/css/extended/copyright.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .pe-copyright { margin-top: 20px; font-size: 14px; } .pe-copyright hr { border-style: dashed; color: #e26c56; } .pe-copyright blockquote { margin: 10px 0; padding: 0 10px; border-inline-start: 3px solid #e26c56; } .pe-copyright a { box-shadow: 0 1px; box-decoration-break: clone; -webkit-box-decoration-break: clone; } 将版权元素添加到文章章末 在 footer 节点上添加如下内容：\nhtml layouts/_default/single.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; {{- if .Content }} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt; {{- end }} {{ if .Param \u0026#34;enableCopyright\u0026#34; }} {{ partial \u0026#34;copyright.html\u0026#34; . }} {{ end }} \u0026lt;footer class=\u0026#34;post-footer\u0026#34;\u0026gt; ... \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; 启用 copyright 在 hugo 配置文件中添加以下配置：\nyaml 1 2 params: enableCopyright: true 原创文章 原创文章应在文章 frontmatter 中添加以下参数：(以下仅为示例，请根据实际自行修改)\nmarkdown 1 2 3 4 5 --- author: tofuwine licenseLink: \u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; licenseName: \u0026#34;CC BY-NC 4.0\u0026#34; --- 也可直接在 hugo 配置文件中指定默认值：\nyaml 1 2 3 4 params: author: tofuwine licenseLink: \u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; licenseName: \u0026#34;CC BY-NC 4.0\u0026#34; 其中 author 为 Hugo-PaperMod 已有参数。\n转载文章 转载文章应在文章 frontmatter 中添加以下参数：\nmarkdown 1 2 3 4 5 6 7 --- reposted: true repostedTitle: \u0026#34;修改为原文章标题\u0026#34; repostedAuthor: \u0026#34;修改为原文章作者名\u0026#34; repostedLink: \u0026#34;修改为原文章链接\u0026#34; contactEmail: your email --- 其中 contactEmail 参数可在 hugo 配置中指定全局默认值：\nyaml 1 2 params: contactEmail: your email 源码 本站主题已开源，最新源码请参考：PaperMod-PE\n","permalink":"https://tofuwine.github.io/posts/18b224b5/","summary":"在文章章末添加版权声明","title":"PaperMod 添加文章版权声明"},{"content":" 官方文档: Search Page\nPaperMod 使用 Fuse.js Basic 实现搜索功能\nHugo 配置 修改 Hugo 配置，添加 JSON 配置以启用搜索。参考如下：\nyaml config.yml 1 2 3 4 5 outputs: home: - HTML - RSS - JSON # 添加此项 搜索页面 新建文件 search.md，内容参考如下：\nmarkdown content/search.md 1 2 3 4 5 6 7 --- title: \u0026#34;Search\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # 对应 search.html，不要修改 description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;placeholder text in search input box\u0026#34; --- 重新启动 hugo server -D，就可以通过 http://localhost:1313/search 进入到搜索页面。\n搜索配置 搜索隐藏 如果不希望某篇文章被搜索，可在文章 frontmatter 中添加：\nmarkdown 1 searchHidden: true Fuse.js Options 参考：https://fusejs.io/api/options.html\n本站搜索配置变更参考：\nyaml config.yml 1 2 3 4 5 6 7 8 9 params: fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.0 # 完全匹配。PaperMod 默认为 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] 个性化 个性化内容参考其他博主，请点击相应链接前往，如有疑问可在评论区留言。\n搜索页添加标签 教程参考 PaperMod 搜索页展示标签列表 —— loyayz 搜索页添加分类 教程参考 PaperMod 搜索页展示系列列表 —— loyayz ","permalink":"https://tofuwine.github.io/posts/e62f6a1b/","summary":"Hugo PaperMod 主题添加搜索页以及搜索页样式优化","title":"PaperMod 添加搜索页"},{"content":" IntelliJ IDEA 2024.1\nFile Template 配置路径：File \u0026gt; New \u0026gt; Edit File Templates...，会打开 File and Code Templates 窗口。\nHugo Note 快速生成 Hugo 文章文件及元信息，替代 hugo new 命令。\n在 Files 界面，插入新的模板：\nName: Hugo Note\nExtension: md\nFile name: ${YEAR}-${MONTH}-${DAY}-${NAME}\nvelocity --- title: \u0026#34;${NAME}\u0026#34; date: ${YEAR}-${MONTH}-${DAY}T${HOUR}:${MINUTE}:${SECOND}+08:00 slug: \u0026#34;\u0026#34; description: \u0026#34;\u0026#34; summary: \u0026#34;\u0026#34; tags: - series: - keywords: - ##weight: 1 shotTop: true draft: true --- 以上内容按个人需求更改。\n使用方式：File \u0026gt; New \u0026gt; Hugo Note。\n输入文件名，如 TestNote，则会创建文件 2024-05-10-TestNote.md （日期为创建文件日期）\n配置说明 作者优先使用文件名中的日期作为文章日期，hugo 配置如下：\nyml config.yml 1 2 3 4 frontmatter: date: - :filename - :default 如果你不需要，上述模板中 File name 请留空。\nLive Template 使用 Live Template 配合 ShortCode 可以快速实现期望样式。\n配置路径：File \u0026gt; Settings \u0026gt; Editor \u0026gt; Live Templates，添加 Live Template。\nShortCode 通用，快速生成 Hugo ShortCode 结构。\nAbbreviation: shortcode\nDescription: Hugo ShortCode\nTemplate text:\nhugo {{\u0026lt;$1$\u0026gt;}} $END$ {{\u0026lt;/$1$\u0026gt;}} Applicable contexts Define: Other\nadmonition Abbreviation: admonition\nDescription: Hugo ShortCode admonition\nTemplate text:\nhugo {{\u0026lt;admonition type=$1$ title=$2$ open=true\u0026gt;}} $END$ {{\u0026lt;/admonition\u0026gt;}} Applicable contexts Define: Other\nhl Abbreviation: hl\nDescription: Hugo ShortCode text highlight\nTemplate text:\nhugo {{\u0026lt;hl\u0026gt;}}$END${{\u0026lt;/hl\u0026gt;}} Applicable contexts Define: Other\n最后 你可以基于你的使用场景，将高频内容配置为 File Template 或 Live Template，提高文章编写效率。\n","permalink":"https://tofuwine.github.io/posts/91f489d1/","summary":"IntelliJ IDEA Settings For Hugo","title":"使用 IntelliJ IDEA 编写 Hugo 文章"},{"content":" 温馨提示 本站集成: Mermaid@10.9.0， 如果使用其他版本可能存在图形样式不一致等问题。 本站 Mermaid diagrams 未适配 dark 主题，请切换使用 light 主题预览。 流程图 文档参考：Mermaid - Flowchart\nmermaid 1 2 3 4 5 flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] flowchart LR A[Hard] --\u003e|Text| B(Round) B --\u003e C{Decision} C --\u003e|One| D[Result 1] C --\u003e|Two| E[Result 2] 时序图 文档参考：Mermaid - Sequence Diagram\nmermaid 1 2 3 4 5 6 7 8 9 sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop HealthCheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! sequenceDiagram Alice-\u003e\u003eJohn: Hello John, how are you? loop HealthCheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! 甘特图 文档参考：Mermaid - Gantt\nmermaid 1 2 3 4 5 6 7 8 gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d 类图 文档参考：Mermaid - Class Diagram\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt; Interface \u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am I? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt; service \u0026gt;\u0026gt; int id size() } classDiagram Class01 \u003c|-- AveryLongClass : Cool \u003c\u003c Interface \u003e\u003e Class01 Class09 --\u003e C2 : Where am I? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u003c\u003c service \u003e\u003e int id size() } ER 图 文档参考：Mermaid - Entity Relationship Diagram\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber PK string make string model string[] parts } PERSON ||--o{ NAMED-DRIVER : is PERSON { string driversLicense PK \u0026#34;The license #\u0026#34; string(99) firstName \u0026#34;Only 99 characters are allowed\u0026#34; string lastName string phone UK int age } NAMED-DRIVER { string carRegistrationNumber PK, FK string driverLicence PK, FK } MANUFACTURER only one to zero or more CAR : makes erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber PK string make string model string[] parts } PERSON ||--o{ NAMED-DRIVER : is PERSON { string driversLicense PK \"The license #\" string(99) firstName \"Only 99 characters are allowed\" string lastName string phone UK int age } NAMED-DRIVER { string carRegistrationNumber PK, FK string driverLicence PK, FK } MANUFACTURER only one to zero or more CAR : makes 状态图 文档参考：Mermaid - State Diagram\nmermaid 1 2 3 4 5 6 7 stateDiagram-v2 [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] 饼图 文档参考：Mermaid - Pie Chart\nmermaid 1 2 3 4 pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85 \u0026#34;Rats\u0026#34; : 15 pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 思维导图 文档参考：Mermaid - Mindmaps\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mindmap root((mindmap)) Origins Long history ::icon(fa fa-book) Popularisation British popular psychology author Tony Buzan Research On effectiveness\u0026lt;br/\u0026gt;and features On Automatic creation Uses Creative techniques Strategic planning Argument mapping Tools Pen and paper Mermaid mindmap root((mindmap)) Origins Long history ::icon(fa fa-book) Popularisation British popular psychology author Tony Buzan Research On effectivenessand features On Automatic creation Uses Creative techniques Strategic planning Argument mapping Tools Pen and paper Mermaid 用户体验旅程图 文档参考：Mermaid - User Journey\nmermaid 1 2 3 4 5 6 7 8 9 journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me C4 图⚠️ ⚠️ Experimental.\n文档参考：Mermaid - C4 Diagram\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 C4Context title System Context diagram for Internet Banking System Person(customerA, \u0026#34;Banking Customer A\u0026#34;, \u0026#34;A customer of the bank, with personal bank accounts.\u0026#34;) Person(customerB, \u0026#34;Banking Customer B\u0026#34;) Person_Ext(customerC, \u0026#34;Banking Customer C\u0026#34;) System(SystemAA, \u0026#34;Internet Banking System\u0026#34;, \u0026#34;Allows customers to view information about their bank accounts, and make payments.\u0026#34;) Person(customerD, \u0026#34;Banking Customer D\u0026#34;, \u0026#34;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026#34;) Enterprise_Boundary(b1, \u0026#34;BankBoundary\u0026#34;) { SystemDb_Ext(SystemE, \u0026#34;Mainframe Banking System\u0026#34;, \u0026#34;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026#34;) System_Boundary(b2, \u0026#34;BankBoundary2\u0026#34;) { System(SystemA, \u0026#34;Banking System A\u0026#34;) System(SystemB, \u0026#34;Banking System B\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } System_Ext(SystemC, \u0026#34;E-mail system\u0026#34;, \u0026#34;The internal Microsoft Exchange e-mail system.\u0026#34;) SystemDb(SystemD, \u0026#34;Banking System D Database\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) Boundary(b3, \u0026#34;BankBoundary3\u0026#34;, \u0026#34;boundary\u0026#34;) { SystemQueue(SystemF, \u0026#34;Banking System F Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) SystemQueue_Ext(SystemG, \u0026#34;Banking System G Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;) } } BiRel(customerA, SystemAA, \u0026#34;Uses\u0026#34;) BiRel(SystemAA, SystemE, \u0026#34;Uses\u0026#34;) Rel(SystemAA, SystemC, \u0026#34;Sends e-mails\u0026#34;, \u0026#34;SMTP\u0026#34;) Rel(SystemC, customerA, \u0026#34;Sends e-mails to\u0026#34;) C4Context title System Context diagram for Internet Banking System Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, with personal bank accounts.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") 象限图 文档参考：Mermaid - Quadrant Chart\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 quadrantChart title Reach and engagement of campaigns x-axis Low Reach --\u0026gt; High Reach y-axis Low Engagement --\u0026gt; High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] quadrantChart title Reach and engagement of campaigns x-axis Low Reach --\u003e High Reach y-axis Low Engagement --\u003e High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] 需求图 文档参考：Mermaid - Requirement Diagram\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } functionalRequirement test_req2 { id: 1.1 text: the second test text. risk: low verifymethod: inspection } performanceRequirement test_req3 { id: 1.2 text: the third test text. risk: medium verifymethod: demonstration } interfaceRequirement test_req4 { id: 1.2.1 text: the fourth test text. risk: medium verifymethod: analysis } physicalRequirement test_req5 { id: 1.2.2 text: the fifth test text. risk: medium verifymethod: analysis } designConstraint test_req6 { id: 1.2.3 text: the sixth test text. risk: medium verifymethod: analysis } element test_entity { type: simulation } element test_entity2 { type: word doc docRef: reqs/test_entity } element test_entity3 { type: \u0026#34;test suite\u0026#34; docRef: github.com/all_the_tests } test_entity - satisfies -\u0026gt; test_req2 test_req - traces -\u0026gt; test_req2 test_req - contains -\u0026gt; test_req3 test_req3 - contains -\u0026gt; test_req4 test_req4 - derives -\u0026gt; test_req5 test_req5 - refines -\u0026gt; test_req6 test_entity3 - verifies -\u0026gt; test_req5 test_req \u0026lt;- copies - test_entity2 requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } functionalRequirement test_req2 { id: 1.1 text: the second test text. risk: low verifymethod: inspection } performanceRequirement test_req3 { id: 1.2 text: the third test text. risk: medium verifymethod: demonstration } interfaceRequirement test_req4 { id: 1.2.1 text: the fourth test text. risk: medium verifymethod: analysis } physicalRequirement test_req5 { id: 1.2.2 text: the fifth test text. risk: medium verifymethod: analysis } designConstraint test_req6 { id: 1.2.3 text: the sixth test text. risk: medium verifymethod: analysis } element test_entity { type: simulation } element test_entity2 { type: word doc docRef: reqs/test_entity } element test_entity3 { type: \"test suite\" docRef: github.com/all_the_tests } test_entity - satisfies -\u003e test_req2 test_req - traces -\u003e test_req2 test_req - contains -\u003e test_req3 test_req3 - contains -\u003e test_req4 test_req4 - derives -\u003e test_req5 test_req5 - refines -\u003e test_req6 test_entity3 - verifies -\u003e test_req5 test_req \u003c- copies - test_entity2 Gitgraph 图 文档参考：Mermaid - Gitgraph Diagrams\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: Example Git diagram --- gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit --- title: Example Git diagram --- gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit 时间线图 文档参考：Mermaid - Timeline\nmermaid 1 2 3 4 5 6 7 timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter XY 图表 文档参考：Mermaid - XYChart\nmermaid 1 2 3 4 5 6 xychart-beta title \u0026#34;Sales Revenue\u0026#34; x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec] y-axis \u0026#34;Revenue (in $)\u0026#34; 4000 --\u0026gt; 11000 bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000] line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000] xychart-beta title \"Sales Revenue\" x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec] y-axis \"Revenue (in $)\" 4000 --\u003e 11000 bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000] line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000] 框图文档 文档参考：Mermaid - Block Diagram\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 block-beta columns 1 db((\u0026#34;DB\u0026#34;)) blockArrowId6\u0026lt;[\u0026#34;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026#34;]\u0026gt;(down) block:ID A B[\u0026#34;A wide one in the middle\u0026#34;] C end space D ID --\u0026gt; D C --\u0026gt; D style B fill:#969,stroke:#333,stroke-width:4px block-beta columns 1 db((\"DB\")) blockArrowId6\u003c[\"\u0026nbsp;\u0026nbsp;\u0026nbsp;\"]\u003e(down) block:ID A B[\"A wide one in the middle\"] C end space D ID --\u003e D C --\u003e D style B fill:#969,stroke:#333,stroke-width:4px 桑基图 文档参考：Mermaid - Sankey\nmermaid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 --- config: sankey: showValues: false --- sankey-beta Agricultural \u0026#39;waste\u0026#39;,Bio-conversion,124.729 Bio-conversion,Liquid,0.597 Bio-conversion,Losses,26.862 Bio-conversion,Solid,280.322 Bio-conversion,Gas,81.144 Biofuel imports,Liquid,35 Biomass imports,Solid,35 Coal imports,Coal,11.606 Coal reserves,Coal,63.965 Coal,Solid,75.571 District heating,Industry,10.639 District heating,Heating and cooling - commercial,22.505 District heating,Heating and cooling - homes,46.184 Electricity grid,Over generation / exports,104.453 Electricity grid,Heating and cooling - homes,113.726 Electricity grid,H2 conversion,27.14 Electricity grid,Industry,342.165 Electricity grid,Road transport,37.797 Electricity grid,Agriculture,4.412 Electricity grid,Heating and cooling - commercial,40.858 Electricity grid,Losses,56.691 Electricity grid,Rail transport,7.863 Electricity grid,Lighting \u0026amp; appliances - commercial,90.008 Electricity grid,Lighting \u0026amp; appliances - homes,93.494 Gas imports,Ngas,40.719 Gas reserves,Ngas,82.233 Gas,Heating and cooling - commercial,0.129 Gas,Losses,1.401 Gas,Thermal generation,151.891 Gas,Agriculture,2.096 Gas,Industry,48.58 Geothermal,Electricity grid,7.013 H2 conversion,H2,20.897 H2 conversion,Losses,6.242 H2,Road transport,20.897 Hydro,Electricity grid,6.995 Liquid,Industry,121.066 Liquid,International shipping,128.69 Liquid,Road transport,135.835 Liquid,Domestic aviation,14.458 Liquid,International aviation,206.267 Liquid,Agriculture,3.64 Liquid,National navigation,33.218 Liquid,Rail transport,4.413 Marine algae,Bio-conversion,4.375 Ngas,Gas,122.952 Nuclear,Thermal generation,839.978 Oil imports,Oil,504.287 Oil reserves,Oil,107.703 Oil,Liquid,611.99 Other waste,Solid,56.587 Other waste,Bio-conversion,77.81 Pumped heat,Heating and cooling - homes,193.026 Pumped heat,Heating and cooling - commercial,70.672 Solar PV,Electricity grid,59.901 Solar Thermal,Heating and cooling - homes,19.263 Solar,Solar Thermal,19.263 Solar,Solar PV,59.901 Solid,Agriculture,0.882 Solid,Thermal generation,400.12 Solid,Industry,46.477 Thermal generation,Electricity grid,525.531 Thermal generation,Losses,787.129 Thermal generation,District heating,79.329 Tidal,Electricity grid,9.452 UK land based bioenergy,Bio-conversion,182.01 Wave,Electricity grid,19.013 Wind,Electricity grid,289.366 --- config: sankey: showValues: false --- sankey-beta Agricultural 'waste',Bio-conversion,124.729 Bio-conversion,Liquid,0.597 Bio-conversion,Losses,26.862 Bio-conversion,Solid,280.322 Bio-conversion,Gas,81.144 Biofuel imports,Liquid,35 Biomass imports,Solid,35 Coal imports,Coal,11.606 Coal reserves,Coal,63.965 Coal,Solid,75.571 District heating,Industry,10.639 District heating,Heating and cooling - commercial,22.505 District heating,Heating and cooling - homes,46.184 Electricity grid,Over generation / exports,104.453 Electricity grid,Heating and cooling - homes,113.726 Electricity grid,H2 conversion,27.14 Electricity grid,Industry,342.165 Electricity grid,Road transport,37.797 Electricity grid,Agriculture,4.412 Electricity grid,Heating and cooling - commercial,40.858 Electricity grid,Losses,56.691 Electricity grid,Rail transport,7.863 Electricity grid,Lighting \u0026 appliances - commercial,90.008 Electricity grid,Lighting \u0026 appliances - homes,93.494 Gas imports,Ngas,40.719 Gas reserves,Ngas,82.233 Gas,Heating and cooling - commercial,0.129 Gas,Losses,1.401 Gas,Thermal generation,151.891 Gas,Agriculture,2.096 Gas,Industry,48.58 Geothermal,Electricity grid,7.013 H2 conversion,H2,20.897 H2 conversion,Losses,6.242 H2,Road transport,20.897 Hydro,Electricity grid,6.995 Liquid,Industry,121.066 Liquid,International shipping,128.69 Liquid,Road transport,135.835 Liquid,Domestic aviation,14.458 Liquid,International aviation,206.267 Liquid,Agriculture,3.64 Liquid,National navigation,33.218 Liquid,Rail transport,4.413 Marine algae,Bio-conversion,4.375 Ngas,Gas,122.952 Nuclear,Thermal generation,839.978 Oil imports,Oil,504.287 Oil reserves,Oil,107.703 Oil,Liquid,611.99 Other waste,Solid,56.587 Other waste,Bio-conversion,77.81 Pumped heat,Heating and cooling - homes,193.026 Pumped heat,Heating and cooling - commercial,70.672 Solar PV,Electricity grid,59.901 Solar Thermal,Heating and cooling - homes,19.263 Solar,Solar Thermal,19.263 Solar,Solar PV,59.901 Solid,Agriculture,0.882 Solid,Thermal generation,400.12 Solid,Industry,46.477 Thermal generation,Electricity grid,525.531 Thermal generation,Losses,787.129 Thermal generation,District heating,79.329 Tidal,Electricity grid,9.452 UK land based bioenergy,Bio-conversion,182.01 Wave,Electricity grid,19.013 Wind,Electricity grid,289.366 ","permalink":"https://tofuwine.github.io/posts/cb59edb8/","summary":"Mermaid 作图以及本站显示效果示例","title":"Markdown 作图 —— Mermaid diagrams"},{"content":"Gisucs 官网：giscus.app\n利用 GitHub Discussions 实现的评论系统，让访客借助 GitHub 在你的网站上留下评论和反应吧！本项目深受 utterances 的启发。\n开源。🌏 无跟踪，无广告，永久免费。📡 🚫 无需数据库。所有数据均储存在 GitHub Discussions 中。:octocat: 支持自定义主题！🌗 支持多种语言。🌐 高可配置性。🔧 自动从 GitHub 拉取新评论与编辑。🔃 可自建服务！🤳 教程参考 本站集成方式参考以下博文，为尊重原创作者，本文不再赘述，请移步到其站点查看：\n教程参考 Hugo 博客引入 Giscus 评论系统 —— 意琦行 你也可以参考官方文档。\n主题切换 按上述教程集成了 Giscus 评论系统，但评论区主题不能动态变更。\n源码参考 issues#1200 —— giscus 如需评论区随界面主题变更，请按如下方式修改配置：\nHugo 配置 将 giscus 属性字段提取到 Hugo 配置中：\nyaml config.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 params: giscus: repo: \u0026#34;{{ YOUR REPOSITORY }}\u0026#34; repoId: \u0026#34;{{ YOUR REPO ID }}\u0026#34; category: \u0026#34;Announcements\u0026#34; categoryId: \u0026#34;{{ YOUR CATEGORY ID }}\u0026#34; mapping: \u0026#34;pathname\u0026#34; strict: \u0026#34;0\u0026#34; reactionsEnabled: \u0026#34;1\u0026#34; emitMetadata: \u0026#34;0\u0026#34; inputPosition: \u0026#34;top\u0026#34; lightTheme: \u0026#34;light\u0026#34; darkTheme: \u0026#34;dark\u0026#34; lang: \u0026#34;zh-CN\u0026#34; 评论界面 变更 comments.html 内容如下:\nhtml layouts/partials/comments.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;div id=\u0026#34;tw-comment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const getStoredTheme = () =\u0026gt; localStorage.getItem(\u0026#34;pref-theme\u0026#34;) === \u0026#34;dark\u0026#34; ? \u0026#34;{{ .Site.Params.giscus.darkTheme }}\u0026#34; : \u0026#34;{{ .Site.Params.giscus.lightTheme }}\u0026#34;; const setGiscusTheme = () =\u0026gt; { const sendMessage = (message) =\u0026gt; { const iframe = document.querySelector(\u0026#39;iframe.giscus-frame\u0026#39;); if (iframe) { iframe.contentWindow.postMessage({giscus: message}, \u0026#39;https://giscus.app\u0026#39;); } } sendMessage({setConfig: {theme: getStoredTheme()}}) } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const giscusAttributes = { \u0026#34;src\u0026#34;: \u0026#34;https://giscus.app/client.js\u0026#34;, \u0026#34;data-repo\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repo }}\u0026#34;, \u0026#34;data-repo-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.repoId }}\u0026#34;, \u0026#34;data-category\u0026#34;: \u0026#34;{{ .Site.Params.giscus.category }}\u0026#34;, \u0026#34;data-category-id\u0026#34;: \u0026#34;{{ .Site.Params.giscus.categoryId }}\u0026#34;, \u0026#34;data-mapping\u0026#34;: \u0026#34;{{ .Site.Params.giscus.mapping | default \u0026#34;pathname\u0026#34; }}\u0026#34;, \u0026#34;data-strict\u0026#34;: \u0026#34;{{ .Site.Params.giscus.strict | default \u0026#34;0\u0026#34; }}\u0026#34;, \u0026#34;data-reactions-enabled\u0026#34;: \u0026#34;{{ .Site.Params.giscus.reactionsEnabled | default \u0026#34;1\u0026#34; }}\u0026#34;, \u0026#34;data-emit-metadata\u0026#34;: \u0026#34;{{ .Site.Params.giscus.emitMetadata | default \u0026#34;0\u0026#34; }}\u0026#34;, \u0026#34;data-input-position\u0026#34;: \u0026#34;{{ .Site.Params.giscus.inputPosition | default \u0026#34;bottom\u0026#34; }}\u0026#34;, \u0026#34;data-theme\u0026#34;: getStoredTheme(), \u0026#34;data-lang\u0026#34;: \u0026#34;{{ .Site.Params.giscus.lang | default \u0026#34;en\u0026#34; }}\u0026#34;, \u0026#34;data-loading\u0026#34;: \u0026#34;lazy\u0026#34;, \u0026#34;crossorigin\u0026#34;: \u0026#34;anonymous\u0026#34;, \u0026#34;async\u0026#34;: \u0026#34;\u0026#34;, }; // 动态创建 giscus script const giscusScript = document.createElement(\u0026#34;script\u0026#34;); Object.entries(giscusAttributes).forEach( ([key, value]) =\u0026gt; giscusScript.setAttribute(key, value)); document.querySelector(\u0026#34;#tw-comment\u0026#34;).appendChild(giscusScript); // 页面主题变更后，变更 giscus 主题 const themeSwitcher = document.querySelector(\u0026#34;#theme-toggle\u0026#34;); if (themeSwitcher) { themeSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } const themeFloatSwitcher = document.querySelector(\u0026#34;#theme-toggle-float\u0026#34;); if (themeFloatSwitcher) { themeFloatSwitcher.addEventListener(\u0026#34;click\u0026#34;, setGiscusTheme); } }); \u0026lt;/script\u0026gt; 评论标题 \u0026amp; 子标题 增加评论区标题 \u0026amp; 子标题，引导用户进行评论。\n修改评论界面，在最上面添加如下内容：\nhtml layouts/partials/comments.html 1 2 3 4 \u0026lt;div class=\u0026#34;comments-title\u0026#34; id=\u0026#34;tw-comment-title\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;x-comments-title\u0026#34;\u0026gt;{{- .Param \u0026#34;discussionTitle\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-size: 1rem\u0026#34;\u0026gt;{{- .Param \u0026#34;discussionSubtitle\u0026#34; }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 添加样式：\ncss assets/css/extended/comment.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /* giscus 评论组件 */ .comments-title { margin-top: 2rem; margin-bottom: 2rem; display: block; text-align: center; } .x-comments-title { display: block; font-size: 1.25em; font-weight: 700; padding: 1.5rem 0 .5rem; } 使用方式 你可以在 Hugo 配置中配置全局值： yaml 1 2 3 4 params: # 评论区 discussionTitle: 欢迎来到评论区 discussionSubtitle: 感谢您的耐心阅读！来选个表情，或者留个评论吧！ 也可在文章 frontmatter 中添加：(以本站 友链 为例) markdown 1 2 discussionTitle: 👇 申请友链 👇 discussionSubtitle: 在下方评论区留下你的链接吧! ","permalink":"https://tofuwine.github.io/posts/610b75f5/","summary":"Hugo \u0026amp; PaperMod 集成 Giscus 评论系统","title":"PaperMod 集成 Giscus 评论"},{"content":" 最新消息 2024-05-16\n本站主题已开源：PaperMod-PE。本文已失效。\n前言 本站使用 Hugo + PaperMod 主题， 并对样式进行了个性化修改，你可以在文中浏览到站点绝大部分的样式。\n文本 样式 效果 普通文本 This is plaintext 加粗 This is bold text 斜体 This text is italicized 删除 This was mistaken text 加粗嵌套斜体 This text is extremely important 加粗+斜体 All this text is important 下标 This is a subscript text 上标 This is a superscript text 部分样式通过 HTML 标签实现, 需开启配置:\nyaml config.yml 1 2 3 4 markup: goldmark: renderer: unsafe: true 代码 行内代码 Tofuwine\u0026rsquo;s Blog Powered by Hugo \u0026amp; PaperMod.\n代码块 主要配色参考:\nlight-theme: monokailight dark-theme: github-dark 标准样式 java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 自定义标题 java io.github.tofuwine.main.HelloHugo.java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 自定义起始行数 \u0026amp; 高亮指定行 go 100 101 102 103 104 105 106 107 108 109 func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \u0026#34;go\u0026#34;: return strings.Title case \u0026#34;chicago\u0026#34;: return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } 折叠代码块 Since: 2024-05-09\njava HelloHugo.java 1 2 3 4 5 6 public class HelloHugo { public static void main(String[] args) { System.out.println(\u0026#34;Hello Hugo!\u0026#34;); } } 更多 ✅ 自定义语言类型显示名称 (Since 2024-05-07) ✅ 语法高亮使用自定义语言类型 (Since 2024-05-09) 引用 这是一段引用内容。\nShortCode admonition 移植自 Hugo 的 Loveit 主题。\n教程参考 如何移植HUGO Loveit主題的admonition shortcodes —— 懶懶 目前支持的 admonition 类型:\nnote admonition - note abstract admonition - abstract info admonition - info tip admonition - tip success admonition - success question admonition - question warning admonition - warning failure admonition - failure danger admonition - danger bug admonition - bug example admonition - example quote admonition - quote hl 文本高亮。效果如下：\nThis is a highlight text. 目录 章节默认以 H2 起始，H5 结束。\n主要改动:\n移动至屏幕左侧显示 教程参考 Hugo博客目录放在侧边 | PaperMod主题 —— Sulv 目录自动折叠/展开 你可以滚动界面观察左侧目录体验效果。\n悬浮按钮 前往评论区 (Go to comment) 前往评论区的悬浮按钮\n你可以在点击右侧对应的悬浮按钮进行体验。\n切换主题 (Theme toggle) 切换主题按钮。主题自带切换按钮在页面顶部，在阅读文章时切换很不方便 (即使有快捷键，也对访客不是很友好)。\n重新实现了一个悬浮按钮实现主题切换，同时保留 PaperMod 的切换按钮 (已禁用)。\n可以点击右侧对应的悬浮按钮进行体验。\n回到顶部 (Go to top) 回到顶部悬浮按钮, 显示进度。\n源码参考 博主网站: 有意栽花花满枝(https://blog.hjroyal.top/)\n开源代码: https://github.com/hjroyal/hugo-papermod-flowers 页面跳动效果 扩展实现了当用户滚动到页面最上方/最下方后，页面轻微的跳动提示用户已到顶/底。\n评论 📢 攻略已发布: PaperMod 集成 Giscus 评论\n赞赏 提供赞赏按钮，点击按钮显示微信 \u0026amp; 支付宝收款码，读者可扫码打赏作者。\n源码参考 博主网站: 有意栽花花满枝(https://blog.hjroyal.top/)\n开源代码: https://github.com/hjroyal/hugo-papermod-flowers 扩展实现了：\n按钮的动态效果 赞赏描述 (支持国际化) 赞赏码/收款码弹出显示 (支持主题切换) 文章自定义赞赏按钮显示内容 rewardButton 文章自定义赞赏描述 rewardSubtitle 赞赏描述开关控制 hideRewardSubtitle 搜索 📢 攻略已发布: PaperMod 添加搜索页\n归档/时间轴 教程参考 Hugo博客时间轴中文化 —— Sulv 置顶、转载、草稿等标识 在文章页、文章列表页、归档页等界面显示置顶、转载、草稿等标识。\n置顶：文章页、文章列表页 转载：文章页、文章列表页、归档页 草稿：归档页（文章页、文章列表页主题自带图标显示） 灯箱 教程参考 Hugo 使用 Fancybox 实现图片灯箱/放大功能 —— atpx 使用 Fancybox 实现图片灯箱效果。\nMermaid diagrams Since: 2024-05-07\n教程参考 Mermaid diagrams —— Hugo 按官方文档添加 code block render hook。\n效果参考：Markdown 作图 —— Mermaid diagrams\n已知缺陷：\n未适配 Dark 主题。请切换使用 Light 主题预览。 KaTex Since: 2024-05-09\n教程参考 Mathematics in Markdown —— Hugo Doc 添加对 LaTex 公式/内联公式的支持。以下是效果展示：\n块显示 $$ \\begin{aligned} KL(\\hat{y} || y) \u0026= \\sum_{c=1}^{M}\\hat{y}_c \\log{\\frac{\\hat{y}_c}{y_c}} \\\\ JS(\\hat{y} || y) \u0026= \\frac{1}{2}(KL(y||\\frac{y+\\hat{y}}{2}) + KL(\\hat{y}||\\frac{y+\\hat{y}}{2})) \\end{aligned} $$ 内联显示 两数和的平方，等于它们的平方和加上它们的积的2倍。 即：\\$(a+b)^2=a^2+2ab+b^2\\$\n自定义页面 友链 教程参考 Hugo 博客添加友链 —— Sulv 关于 Since: 2024-05-06\n显示 关于 界面。\n预览：点击此处\n最新 Since: 2024-05-11\n显示最新文章列表\n预览：点击此处\n文章版权声明 在文章末尾添加版权声明。\n结尾 除了上述内容，作者还对站点很多细节进行了优化。但由于站点搭建初期改动地方较多且频繁，很多内容并没有详尽的记载，在此就不过多赘述了。\n","permalink":"https://tofuwine.github.io/posts/3c96c5d2/","summary":"快速预览本站各种样式 (Hugo \u0026amp; PaperMod 主题)","title":"PaperMod 主题个性化"},{"content":"开发环境 JetBrains IDEA 2024.1 Java 17 Spring Boot 3.2.5 Maven 3.9.6 Gradle 8.7 我们以本地 hutool 5.8.26 为例。\nMaven 新建 Spring Boot 工程，使用 Maven 构建。\n存放 Jar 新建 libs 目录，将下载好的 hutool-all-5.8.26.jar 放在其中：\n引入依赖 修改 pom.xml 文件，添加 hutool 依赖：\nxml 1 2 3 4 5 6 7 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.8.26\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;system\u0026lt;/scope\u0026gt; \u0026lt;systemPath\u0026gt;${project.basedir}/libs/hutool-all-5.8.26.jar\u0026lt;/systemPath\u0026gt; \u0026lt;/dependency\u0026gt; 测试 编写测试方法：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package cn.tofuwine.spring.boot3.maven.example; import cn.hutool.core.util.StrUtil; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Test implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { String helloWorld = StrUtil.builder() .append(\u0026#34;hello\u0026#34;) .append(\u0026#34; world\u0026#34;) .toString(); System.out.println(helloWorld); } } 启动工程，控制台打印 hello world。\n打包 修改 pom.xml，添加如下：\nxml 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 添加如下配置，包含本地 Jar --\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;includeSystemScope\u0026gt;true\u0026lt;/includeSystemScope\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 项目打包后，以压缩文件形式打开生成的 jar，查看是否包含 hutool-all：（目录：BOOT-INF/lib）\n运行 Jar，查看是否能打印出 hello world：\nbash 1 java -jar .\\spring-boot-3-maven-example-0.0.1-SNAPSHOT.jar 验证结束，无问题。\nGradle 新建 Spring Boot 工程，使用 Gradle - Kotlin DSL 构建。\n存放 Jar 新建 libs 目录，将下载好的 hutool-all-5.8.26.jar 放在其中：\n引入依赖 方式一 单独引入一个 Jar 文件（Jar：hutool-all-5.8.26.jar）：\nkotlin 1 2 3 4 5 dependencies { // ... other dependencies implementation(files(\u0026#34;libs/hutool-all-5.8.26.jar\u0026#34;)) // ... other dependencies } 方式二 引入一个文件夹中的所有 Jar（文件夹： libs）：\nkotlin 1 2 3 4 5 dependencies { // ... other dependencies implementation(fileTree(mapOf(\u0026#34;dir\u0026#34; to \u0026#34;libs\u0026#34;, \u0026#34;include\u0026#34; to listOf(\u0026#34;*.jar\u0026#34;)))) // ... other dependencies } 测试 编写测试方法：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package cn.tofuwine.spring.boot3.gradle.kotlin; import cn.hutool.core.util.StrUtil; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Test implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { String helloWorld = StrUtil.builder() .append(\u0026#34;hello\u0026#34;) .append(\u0026#34; world\u0026#34;) .toString(); System.out.println(helloWorld); } } 启动工程，控制台打印 hello world。\n打包 使用 bootJar 进行打包：\n生成的 Jar 目录为 build/libs。以压缩文件形式打开生成的 jar，查看是否包含 hutool-all：（目录：BOOT-INF/lib）\n运行 Jar，查看是否能打印出 hello world：\nbash 1 java -jar .\\spring-boot-3-gradle-kotlin-0.0.1-SNAPSHOT.jar 验证结束，无问题。\n","permalink":"https://tofuwine.github.io/posts/c9102d8e/","summary":"Spring Boot 工程引入并打包本地 Jar","title":"Spring Boot 引入本地 Jar 包"},{"content":" Gradle 目前支持两种 DSL（Domain Specific Language）：Groovy DSL 和 Kotlin DSL\n更改 Gradle 本地仓库 新建环境变量 GRADLE_USER_HOME，并指定路径，即可修改 Gradle 本地仓库地址。\n指定 Java 版本 Kotlin DSL\nkotlin 1 java.sourceCompatibility = JavaVersion.VERSION_17 Javadoc 编码问题 问题详情：\ntext 1 error: unmappable character (0x89) for encoding GBK 解决方式：\nKotlin DSL\n在 build.gradle.kts 文件中添加如下内容：\nkotlin 1 2 3 4 5 6 7 8 tasks { compileJava { options.encoding = \u0026#34;UTF-8\u0026#34; } compileTestJava { options.encoding = \u0026#34;UTF-8\u0026#34; } } 无法识别 lombok 问题 Kotlin DSL\nkotlin 1 2 3 4 // lombok 使用如下依赖 (版本号可替换) // https://mvnrepository.com/artifact/org.projectlombok/lombok compileOnly(\u0026#34;org.projectlombok:lombok:1.18.26\u0026#34;) annotationProcessor(\u0026#34;org.projectlombok:lombok:1.18.26\u0026#34;) distributionUrl 国内镜像 gradle/wrapper/gradle-wrapper.properties 文件 distributionUrl 默认如下（以 Gradle 8.7 为例）：\nproperties 1 distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-bin.zip 因为众所周知的原因，在国内使用该地址下载可能受阻。我们可以改用国内镜像地址（以腾讯镜像为例）：\nproperties 1 distributionUrl=https\\://mirrors.cloud.tencent.com/gradle/gradle-8.7-bin.zip 或者也可以指向本地文件：\nproperties 1 distributionUrl=file:///D:/Downloads/gradle-8.7-bin.zip 建议使用国内镜像。\n","permalink":"https://tofuwine.github.io/posts/879d9ef5/","summary":"Gradle 常见问题汇总","title":"Gradle FAQs"},{"content":"数据库中如何执行 SQL 语句？\n下图显示了这一过程。请注意，不同数据库的架构各不相同，下图展示了一些常见的设计。\n第 1 步 通过传输层协议（如 TCP）向数据库发送 SQL 语句。\n第 2 步 将 SQL 语句发送到命令解析器，在那里进行语法和语义分析，然后生成查询树。\n第 3 步 将查询树发送给优化器。优化器会创建一个执行计划。\n第 4 步 将执行计划发送给执行器。执行器从执行计划中获取数据。执行器与存储引擎交互以访问数据。\n第 5 步 访问方法提供执行所需的数据获取逻辑，从存储引擎获取数据。\n第 6 步 访问方法决定 SQL 语句是否只读。如果查询是只读的（SELECT 语句），则将其传递给缓冲区管理器进行进一步处理。缓冲区管理器会在缓存或数据文件中查找数据。\n第 7 步 如果语句是 UPDATE 或 INSERT，则将其传递给事务管理器做进一步处理。\n第 8 步 在事务处理期间，数据处于锁定模式。这是由锁管理器保证的。它还能确保事务的 ACID 属性。\n","permalink":"https://tofuwine.github.io/posts/21eb59d0/","summary":"数据库中如何执行 SQL 语句？\n下图显示了这一过程。请注意，不同数据库的架构各不相同，下图展示了一些常见的设计。\n第 1 步 通过传输层协议（如 TCP）向数据库发送 SQL 语句。\n第 2 步 将 SQL 语句发送到命令解析器，在那里进行语法和语义分析，然后生成查询树。\n第 3 步 将查询树发送给优化器。优化器会创建一个执行计划。\n第 4 步 将执行计划发送给执行器。执行器从执行计划中获取数据。执行器与存储引擎交互以访问数据。\n第 5 步 访问方法提供执行所需的数据获取逻辑，从存储引擎获取数据。\n第 6 步 访问方法决定 SQL 语句是否只读。如果查询是只读的（SELECT 语句），则将其传递给缓冲区管理器进行进一步处理。缓冲区管理器会在缓存或数据文件中查找数据。\n第 7 步 如果语句是 UPDATE 或 INSERT，则将其传递给事务管理器做进一步处理。\n第 8 步 在事务处理期间，数据处于锁定模式。这是由锁管理器保证的。它还能确保事务的 ACID 属性。","title":"SQL 语句是如何执行的？"},{"content":"简介 Spring Boot Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need without having to hunt through sample code and copy paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access include the spring-boot-starter-data-jpa dependency in your project, and you are good to go. Spring Boot Starter 是 Spring Boot 中的一个重要概念，它是一种提供依赖项的方式，可以帮助开发人员快速集成第三方库和框架。Spring Boot Starter 的目的是简化 Spring 应用程序的依赖管理，将一组相关的依赖项打包在一起，并提供一个依赖项描述文件，使开发人员可以快速集成。\nSpring Boot Starter 的核心原理是基于 Spring Boot 的自动配置机制，它是 Spring Boot 的一个重要特性，也是实现 Spring Boot Starter 的关键。Spring Boot 的自动配置机制通过扫描 classpath 上的 Jar 包和配置文件，自动创建 Spring Bean，完成对应的配置。开发人员只需引入对应的 Starter 依赖，就能够自动配置所需的 Bean，不需要手动编写配置文件。\n查看 Spring 提供的 Starters：spring-boot-starters\n结构 官方文档参考: custom-starter 一个 Starter 工程通常包含两个模块（不是必须的）：\nautoconfigure。定义自动配置类以及用于自定义配置的属性类等。 starter。用于引入库和自动配置项目的依赖项。 以 Mybatis 为例\nmybatis/spring-boot-starter 其包含如下模块：\nmybatis-spring-boot-autoconfigure mybatis-spring-boot-starter mybatis-spring-boot-samples mybatis-spring-boot-starter-test mybatis-spring-boot-test-autoconfigure 命名 实现自己的 Starter，第一步就是为其命名。看一下官方提供的介绍：\nWhat is in a name\nAll official starters follow a similar naming pattern; spring-boot-starter-*, where * is a particular type of application. This naming structure is intended to help when you need to find a starter. The Maven integration in many IDEs lets you search dependencies by name. For example, with the appropriate Eclipse or Spring Tools plugin installed, you can press ctrl-space in the POM editor and type “spring-boot-starter” for a complete list.\nAs explained in the “Creating Your Own Starter” section, third party starters should not start with spring-boot, as it is reserved for official Spring Boot artifacts. Rather, a third-party starter typically starts with the name of the project. For example, a third-party starter project called thirdpartyproject would typically be named thirdpartyproject-spring-boot-starter.\n建议格式：\n官方的 Starter 命名格式为：spring-boot-starter-* 第三方，即我们自建的 Starter 命名格式为 *-spring-boot-starter 自定义 Starter 我们以基本结构为例（即包含 autoconfigure 和 starter 两个模块），创建我们的自定义 Starter：\n创建一个空项目 新建项目 example-spring-boot：\npom.xml pom.xml 内容参考如下：（建议先将两个模块创建完后再修改）\nxml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;example-spring-boot-autoconfigure\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;exmaple-spring-boot-starter\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;21\u0026lt;/java.version\u0026gt; \u0026lt;maven.compiler.source\u0026gt;21\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;21\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;spring-boot.version\u0026gt;3.2.4\u0026lt;/spring-boot.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;pluginManagement\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;exclude\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-autoconfigure-processor\u0026lt;/artifactId\u0026gt; \u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/pluginManagement\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 创建 autoconfigure 模块 右键项目，选择 New -\u0026gt; Module...，创建 example-spring-boot-autoconfigure 模块：\npom.xml pom.xml 内容参考如下：（建议先将两个模块创建完后再修改）\nxml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;21\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;21\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- Compile dependencies --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Optional dependencies --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-autoconfigure-processor\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- @ConfigurationProperties annotation processing (metadata for IDEs) --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-configuration-processor\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Test dependencies --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-test-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 创建 starter 模块 右键项目，选择 New -\u0026gt; Module...，创建 example-spring-boot-starter 模块：\npom.xml pom.xml 内容参考如下：\nxml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;21\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;21\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; The starter module that provides a dependency to the autoconfigure module as well as \u0026ldquo;acme\u0026rdquo; and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.\nstarter 模块主要为了提供 autoconfigure 模块的依赖，正常情况下，autoconfigure 引用的依赖应该在此声明。由于我们 autoconfigure 模块未引用其他依赖，此处仅引入 autoconfigure 和 spring-boot-starter。\n实现一个简单的功能 在 autoconfigure 模块实现获取当前时间的功能（时间格式根据配置而变）：\nProperties 作为 Starter 项目，很多情况下需要用户进行必要的配置更改，用户一般在配置文件 (application.properties 或 application.yml）中更改这些配置。我们一般使用 @ConfigurationProperties 进行获取（也可通过 @Vaule + SpEL 表达式获取）。\n创建 ExampleProperties，使用 @ConfigurationProperties(\u0026quot;example\u0026quot;) 注入配置文件 example 节点配置。\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package cn.tofuwine.example.starter.config; import org.springframework.boot.context.properties.ConfigurationProperties; @ConfigurationProperties(prefix = \u0026#34;example\u0026#34;) public class ExampleProperties { private String timePattern = \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;; public String getTimePattern() { return timePattern; } public void setTimePattern(String timePattern) { this.timePattern = timePattern; } } 元数据 [可选] 官方文档参考：configuration-metadata 元数据文件 spring-configuration-metadata.json，提供所有支持的配置属性的详细信息。这些文件旨在允许 IDE 开发人员在用户使用配置文件 application.properties 或 application.yml 文件时提供上下文帮助和自动补全。\n手动创建\n在 resources 目录下创建 META-INF 目录，创建 spring-configuration-metadata.json 文件，内容如下：\njson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \u0026#34;groups\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cn.tofuwine.example.config.ExampleProperties\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;cn.tofuwine.example.config.ExampleProperties\u0026#34; } ], \u0026#34;properties\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;example.time-pattern\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;java.lang.String\u0026#34;, \u0026#34;sourceType\u0026#34;: \u0026#34;cn.tofuwine.example.config.ExampleProperties\u0026#34;, \u0026#34;defaultValue\u0026#34;: \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34; } ], \u0026#34;hints\u0026#34;: [] } 自动创建\n本文示例采用此方式。\n通过 spring-boot-configuration-processor 搭配 @ConfigurationProperties 自动创建元数据文件。仅需引入依赖：\nxml 1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-configuration-processor\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Service 新建 TimeService，实现功能：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package cn.tofuwine.example.starter.service; import cn.tofuwine.example.starter.config.ExampleProperties; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; @Service public class TimeService { private ExampleProperties exampleProperties; public String now() { DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(exampleProperties.getTimePattern()); String time = LocalDateTime.now().format(dateTimeFormatter); return \u0026#34;Example Starter Now: \u0026#34; + time; } @Autowired public void setExampleProperties(ExampleProperties exampleProperties) { this.exampleProperties = exampleProperties; } } Configuration 新建配置类，将 Starter 的 Bean 注入到 IoC 中。\n使用 @Bean 添加指定的对象到 IoC 中：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package cn.tofuwine.example.config; import cn.tofuwine.example.service.TimeService; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @EnableConfigurationProperties(ExampleProperties.class) @Configuration public class ExampleAutoConfiguration { @Bean public TimeService timeService() { return new TimeService(); } } 也可以使用 @ComponentScan 将所有 cn.tofuwine.example 为前缀的包 Component 均加入到 IoC 中：\njava 1 2 3 4 5 6 7 8 9 10 11 package cn.tofuwine.example.config; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @EnableConfigurationProperties(ExampleProperties.class) @Configuration @ComponentScan(basePackages = \u0026#34;cn.tofuwine.example\u0026#34;) public class ExampleAutoConfiguration { } 至此，我们的功能已经实现。\n自动配置 官方文档参考：locating-auto-configuration-candidates 为了让我们的 Starter 在被其他 Spring Boot 项目引用时可直接使用，我们需要指定我们的配置类，并让其自动加载到 ApplicationContext 中。方式如下：\n创建文件 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports，并指定 ExampleConfiguration：（如需导入多个，每个占一行）\ntext 1 cn.tofuwine.example.starter.config.ExampleAutoConfiguration 此方式在 Spring Boot 2.7 起开始支持。其他方式请参考附录。\n打包 项目打包并注册到本地仓库（以 IDEA 为例）。\n打包后，在 example-spring-boot-autoconfigure 模块 target 目录下生成文件 example-spring-boot-starter-1.0-SNAPSHOT.jar ，同时可以看到在 target/classes/META-INF 目录下包含 spring-configuration-metadata.json 文件。\n使用 Starter 新建 Spring Boot 项目 我们新建一个 Spring Boot 项目 using-example-starter （建议使用与 Starter 同版本 Java 和 Spring Boot）：\n引入 Starter 依赖 编辑 pom.xml，添加 Starter 依赖：\nxml 1 2 3 4 5 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.tofuwine\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;example-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 模拟使用 新建类 ExampleRunner，参考如下：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package cn.tofuwine.using.example.starter; import cn.tofuwine.example.starter.service.TimeService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class ExampleRunner implements ApplicationRunner { private TimeService timeService; @Override public void run(ApplicationArguments args) throws Exception { System.out.println(timeService.now()); } @Autowired public void setTimeService(TimeService timeService) { this.timeService = timeService; } } 修改配置文件，添加如下配置（将输出的格式修改为 yyyy-MM-dd）：\nproperties 1 example.time-pattern=yyyy-MM-dd 运行程序，观察控制台输出：\n可以看到输出结果是 2024-04-17，符合预期。\n单元测试 由于单独的 Starter 并不是一个完整的应用，大多数情况只是作为一个应用的一部分，如果只是通过另一个项目引用并启动，对 debug 有很大的影响，所以我们需要创建可以独立运行的 Test。\n依赖 Starter 单元测试引入以下两个依赖（本文上述示例中已经引入）：\nxml 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!-- Test dependencies --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-test-autoconfigure\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 首先在 test/resources 目录下创建配置文件 application-test.properties，内容如下：\nproperties 1 example.time-pattern=yyyy-MM-dd 然后，为 TestService 写一个简单的测试：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package cn.tofuwine.example.starter.service; import cn.tofuwine.example.starter.config.ExampleAutoConfiguration; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.context.annotation.Profile; import org.springframework.test.context.TestPropertySource; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import static org.junit.jupiter.api.Assertions.*; @SpringBootTest(classes = {ExampleAutoConfiguration.class}) @TestPropertySource(\u0026#34;classpath:application-test.properties\u0026#34;) class TimeServiceTest { @Autowired private TimeService timeService; @Test void now() { DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd\u0026#34;); String expect = \u0026#34;Example Starter Now: \u0026#34; + LocalDateTime.now().format(dateTimeFormatter); assertEquals(expect, timeService.now()); } } 然后运行查看测试结果，显示 Tests passed: 1。\n附录 如何将自定义 Starter 中的组件集成到 Spring Boot 应用中 方式一 在 META-INF 创建文件显示指定配置类。\nSpring Boot 2.7 以上版本：\n创建文件 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports，并指定相关的类（如需导入多个，每个占一行）。参考文中示例。\nSpring Boot 3.0 以下版本\n（注意：此方式在 Spring Boot 2.7 开始被标记为 deprecated，并在 Spring Boot 3 开始移除）\n创建 META-INF/spring.factories 文件，并指定相关的类（如需导入多个，每个占一行，换行使用 \\）。\n使用此方式时，当一个 Spring Boot 项目引入我们的 Starter，那么会自动将 Starter 的相关组件注入到其 ApplicationContext 中。\n以本文 Starter 为例，spring.factories 内容参考如下：\ntext 1 2 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ cn.tofuwine.example.starter.config.ExampleAutoConfiguration 方式二 创建自定义注解 @EnableXxx，以本文示例，新建注解 @EnableExample，内容如下：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package cn.tofuwine.example.starter.annotations; import cn.tofuwine.example.starter.config.ExampleAutoConfiguration; import org.springframework.context.annotation.Import; import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Import({ExampleAutoConfiguration.class}) public @interface EnableExample { } 当一个 Spring Boot 项目引入我们的 Starter 后，可以通过使用 @EnableExample 注解开启我们的 Starter，将相关组件注入到其 ApplicationContext 中。相较于方式一，将选择权交给了引用方。\n","permalink":"https://tofuwine.github.io/posts/d41b9ed5/","summary":"介绍 Spring Boot 如何自定义 Starter 工程","title":"Spring Boot 自定义 Starter"},{"content":"为了实现在 Spring Boot 工程启动后，自动执行特定方法的功能，我们可以通过以下方式实现。\nCommandLineRunner 实现 CommandLineRunner 接口，在 run 方法里面调用需要执行的方法即可。\n特定：\n方式执行时，项目已初始化完毕，可提供正常服务。 可以接受参数，不限制格式。项目启动时传入参数：java -jar example.jar arg1 arg2 arg3 可直接注入 Spring IoC 容器的 bean。 代码示例：\njava 1 2 3 4 5 6 7 8 9 10 import org.springframework.boot.CommandLineRunner; import org.springframework.stereotype.Component; @Component public class Runner implements CommandLineRunner { @Override public void run(String... args) throws Exception { // todo your code } } ApplicationRunner 实现 ApplicationRunner 接口与实现 CommandLineRunner 接口基本一致。\n唯一不同是启动是参数的格式：CommandLineRunner 对于参数格式没有限制，ApplicationRunner 接口参数格式必须是 -key=value\n代码示例：\njava 1 2 3 4 5 6 7 8 9 10 11 12 import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationRunner { @Override public void run(ApplicationArguments args) throws Exception { // todo your code } } ApplicationListener 实现接口 ApplicationListener 方式和实现 ApplicationRunner、CommandLineRunner 接口都不影响服务，均可正常提供服务。\n为了可以直接注入 bean，监听事件一般为 ApplicationStartedEvent 或 ApplicationReadyEvent，其他事件可能无法正常注入 bean。\n代码示例:\njava ApplicationStartedEvent 1 2 3 4 5 6 7 8 9 10 11 import org.springframework.boot.context.event.ApplicationStartedEvent; import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationListener\u0026lt;ApplicationStartedEvent\u0026gt; { @Override public void onApplicationEvent(ApplicationStartedEvent event) { // todo your code } } java ApplicationReadyEvent 1 2 3 4 5 6 7 8 9 10 11 import org.springframework.boot.context.event.ApplicationReadyEvent; import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class Runner implements ApplicationListener\u0026lt;ApplicationReadyEvent\u0026gt; { @Override public void onApplicationEvent(ApplicationReadyEvent event) { // todo your code } } 其他方式 你也可以通过自定义 Spring Bean 初始化逻辑来实现程序启动时自动执行方法。 但一般此类方式均在项目启动过程中执行，且执行过程期间无法提供正常服务。 如使用 @PostConstruct 注解、实现 InitializingBean 接口、指定 init-method 方法等。\n执行顺序 其他方式（通过自定义 Bean 初始化逻辑）始终最先执行。 如果监听 ApplicationStartedEvent 事件，则一定会在 CommandLineRunner 和 ApplicationRunner 之前执行。 如果监听 ApplicationReadyEvent 事件，则一定会在 CommandLineRunner 和 ApplicationRunner 之后执行。 CommandLineRunner 和 ApplicationRunner 默认是 ApplicationRunner 先执行。如果指定了 @Order 则按照 @Order 大的先执行。 ","permalink":"https://tofuwine.github.io/posts/14d680b0/","summary":"Spring Boot 启动后自动执行特定方法","title":"Spring Boot 启动后自动执行方法的几种方式"},{"content":"简介 Apache FreeMarker™ 是一个模板引擎：一个基于模板和变更数据生成文本输出（HTML 网页、电子邮件、配置文件、源代码等）的 Java 库。\nFreeMarker 没有其他任何依赖，仅仅依赖 Java 自身。\n最新版本：FreeMarker 2.3.32（2023-01-12）\nmaven 依赖 普通 Java 工程按如下方式引入：\nxml pom.xml 1 2 3 4 5 6 \u0026lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.freemarker\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;freemarker\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.32\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 如果是 Spring Boot 工程可以引入 spring-boot-starter-freemarker：\nxml pom.xml 1 2 3 4 5 \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-freemarker --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-freemarker\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 代码示例 普通工程 以下代码来源于 FreeMarker 官方教程：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import freemarker.template.*; import java.util.*; import java.io.*; public class Test { public static void main(String[] args) throws Exception { /* ------------------------------------------------------------------------ */ /* You should do this ONLY ONCE in the whole application life-cycle: */ /* Create and adjust the configuration singleton */ Configuration cfg = new Configuration(Configuration.VERSION_2_3_32); cfg.setDirectoryForTemplateLoading(new File(\u0026#34;/where/you/store/templates\u0026#34;)); // Recommended settings for new projects: cfg.setDefaultEncoding(\u0026#34;UTF-8\u0026#34;); cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER); cfg.setLogTemplateExceptions(false); cfg.setWrapUncheckedExceptions(true); cfg.setFallbackOnNullLoopVariable(false); cfg.setSQLDateAndTimeTimeZone(TimeZone.getDefault()); /* ------------------------------------------------------------------------ */ /* You usually do these for MULTIPLE TIMES in the application life-cycle: */ /* Create a data-model */ Map root = new HashMap(); root.put(\u0026#34;user\u0026#34;, \u0026#34;Big Joe\u0026#34;); Product latest = new Product(); latest.setUrl(\u0026#34;products/greenmouse.html\u0026#34;); latest.setName(\u0026#34;green mouse\u0026#34;); root.put(\u0026#34;latestProduct\u0026#34;, latest); /* Get the template (uses cache internally) */ Template temp = cfg.getTemplate(\u0026#34;test.ftlh\u0026#34;); /* Merge data-model with template */ Writer out = new OutputStreamWriter(System.out); temp.process(root, out); // Note: Depending on what `out` is, you may need to call `out.close()`. // This is usually the case for file output, but not for servlet output. } } Product 类如下：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Product bean; note that it must be a public class! */ public class Product { private String url; private String name; // As per the JavaBeans spec., this defines the \u0026#34;url\u0026#34; bean property // It must be public! public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } // As per the JavaBean spec., this defines the \u0026#34;name\u0026#34; bean property // It must be public! public String getName() { return name; } public void setName(String name) { this.name = name; } } FreeMarker 模板 test.ftlh 如下：\nhtml 1 2 3 4 5 6 7 8 9 10 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome ${user}!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Our latest product: \u0026lt;a href=\u0026#34;${latestProduct.url}\u0026#34;\u0026gt;${latestProduct.name}\u0026lt;/a\u0026gt;! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Spring Boot 工程 在 Spring Boot 中实现上述功能（需引入 spring-boot-starter-freemarker 依赖）：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import freemarker.template.Configuration; import freemarker.template.Template; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.ApplicationArguments; import org.springframework.boot.ApplicationRunner; import org.springframework.stereotype.Component; import java.io.OutputStreamWriter; import java.io.Writer; import java.util.HashMap; import java.util.Map; @Component public class TestRunner implements ApplicationRunner { private Configuration configuration; @Autowired public void setConfiguration(Configuration configuration) { this.configuration = configuration; } @Override public void run(ApplicationArguments args) throws Exception { Map root = new HashMap(); root.put(\u0026#34;user\u0026#34;, \u0026#34;Big Joe\u0026#34;); Product latest = new Product(); latest.setUrl(\u0026#34;products/greenmouse.html\u0026#34;); latest.setName(\u0026#34;green mouse\u0026#34;); root.put(\u0026#34;latestProduct\u0026#34;, latest); Template temp = configuration.getTemplate(\u0026#34;test.ftlh\u0026#34;); Writer out = new OutputStreamWriter(System.out); temp.process(root, out); } } Product 类（使用 Lombok)：\njava 1 2 3 4 5 6 7 import lombok.Data; @Data public class Product { private String url; private String name; } 模板文件放在 /resources/templates 目录下。\n提示 Spring Boot 默认封装了 FreeMarker 配置，我们可以直接注入使用。也可以修改 FreeMarker 配置，如缓存、模板路径、模板文件后缀等。配置节点以 spring.freemarker 为前缀。 模板语法 提示 具体详细的语法及说明应参考官方文档。 模板结构 FTL 模板由以下部分混合而成：\n文本（Text）： 文本内容会原样输出。 插值（Interpolation）：这部分的输出会被计算结果替代。插值使用 ${...}。（注：#{...} 已被弃用。See more here） FTL 标签（FTL tags）：与 HTML 标签相似，用于 FreeMarker 指令。 注释（Comments）：使用 \u0026lt;#-- 和 --\u0026gt; 来分隔。注释会被 FreeMarker 直接忽略，不会在输出内容中显示。 插值 标准格式为：${expression} 。其中 expression 可以是所有类型的表达式。如：${100 + x}\n提示 插值表达式也可以使用 [=expression] 形式。参考 See more about alternative syntaxes\u0026hellip; 表达式 直接指定值 Strings: \u0026quot;Foo\u0026quot; or 'Foo' or \u0026quot;It's \\\u0026quot;quoted\\\u0026quot;\u0026quot; or 'It\\'s \u0026quot;quoted\u0026quot;' or r\u0026quot;C:\\raw\\string\u0026quot; Numbers: 123.45 Booleans: true, false Sequences: [\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;, 123.45]; Ranges: 0..9, 0..\u0026lt;10 (or 0..!10), 0.. Hashes: {\u0026quot;name\u0026quot;:\u0026quot;green mouse\u0026quot;, \u0026quot;price\u0026quot;:150} 检索变量 顶层变量: user 从 Hashes 中检索数据: user.name, user[\u0026quot;name\u0026quot;] 从 Sequences 中检索数据: products[5] 特殊变量: .main 字符串操作 插值（或连接）: \u0026quot;Hello ${user}!\u0026quot; (or \u0026quot;Hello \u0026quot; + user + \u0026quot;!\u0026quot;) 获取一个字符: name[0] 字符串切片 Inclusive end: name[0..4], Exclusive end: name[0..\u0026lt;5], Length-based (lenient): name[0..*5], Remove starting: name[5..] Sequence 操作 连接: users + [\u0026quot;guest\u0026quot;] Sequence 切片: Inclusive end: products[20..29], Exclusive end: products[20..\u0026lt;30], Length-based (lenient): products[20..*10], Remove starting: products[20..] Hash 操作 连接: passwords + { \u0026quot;joe\u0026quot;: \u0026quot;secret42\u0026quot; } 算数运算: (x * 1.5 + 10) / 2 - y % 100 比较运算: x == y, x != y, x \u0026lt; y, x \u0026gt; y, x \u0026gt;= y, x \u0026lt;= y, x lt y, x lte y, x gt y, x gte y, \u0026hellip;etc. 逻辑操作: !registered \u0026amp;\u0026amp; (firstVisit || fromEurope) 内建函数: name?upper_case, path?ensure_starts_with('/') 方法调用: repeat(\u0026quot;What\u0026quot;, 3) 处理不存在的值: 默认值: name!\u0026quot;unknown\u0026quot; or (user.name)!\u0026quot;unknown\u0026quot; or name! or (user.name)! 检测不存在值: name?? or (user.name)?? 赋值操作: =, +=, -=, *=, /=, %=, ++, -- Local lambdas: x -\u0026gt; x + 1, (x, y) -\u0026gt; x + y 内置函数参考 字母索引 字符串内置函数 数字内置函数 日期内置函数 布尔值内置函数 序列内置函数 哈希内置函数 结点（XML） 内置函数 循环变量内置函数 独立类型内置函数 很少使用的专家内置函数 指令 标准格式是使用两种 FTL 标签：\n开始标签：\u0026lt;#directivename parameters\u0026gt; 结束标签：\u0026lt;/#directivename\u0026gt; 例如：\u0026lt;#if something\u0026gt;...\u0026lt;/#if\u0026gt;\nFTL 标签与 HTML 标签一样，必须正确嵌套。所以下面的代码是错误的，因为 if 指令既在 list 指令的嵌套内容的内部又在外部：\nhtml 1 2 3 4 5 6 7 8 \u0026lt;ul\u0026gt; \u0026lt;#list animals as animal\u0026gt; \u0026lt;li\u0026gt;${animal.name} for ${animal.price} Euros \u0026lt;#if user == \u0026#34;Big Joe\u0026#34;\u0026gt; (except for you) \u0026lt;/#list\u0026gt; \u0026lt;#-- WRONG! The \u0026#34;if\u0026#34; has to be closed first. --\u0026gt; \u0026lt;/#if\u0026gt; \u0026lt;/ul\u0026gt; 提示 FreeMarker 可以使用 [ 和 ] 替代 \u0026lt; 和 \u0026gt;。例如：[#if user == \u0026quot;Big Joe\u0026quot;]...[/#if]。\n更多信息请阅读：Miscellaneous/Alternative (square bracket) syntax.\n指令参考：\nAlphabetical index assign attempt, recover autoesc compress escape, noescape (deprecated) flush ftl function, return global if, else, elseif import include list, else, items, sep, break, continue local macro, nested, return noautoesc noparse nt outputformat setting stop switch, case, default, break t, lt, rt User-defined directive (\u0026lt;@\u0026hellip;\u0026gt;) visit, recurse, fallback 参考 FreeMarker 官方文档 FreeMarker 中文手册 附录 FreeMarker 支持的转义字符 Escape sequence Meaning \\\u0026quot; 引号 (u0022) \\' 单引号 (u0027) \\{ 起始花括号:{ \\= 等号:= (Supported since FreeMarker 2.3.28.) \\\\ 反斜杠 (u005C) \\n 换行符 (u000A) \\r 回车 (u000D) \\t 水平制表符(又称为tab) (u0009) \\b 退格 (u0008) \\f 换页 (u000C) \\l 小于号:\u0026lt; \\g 大于号:\u0026gt; \\a \u0026amp; 符:\u0026amp; \\xCode 字符的十六进制Unicode 码 (UCS code) 在 \\x 之后的 Code 是 1-4 位的十六进制码。下面这个示例中都是在字符串中放置版权符号： \u0026quot;\\xA9 1999-2001\u0026quot;， \u0026quot;\\x0A9 1999-2001\u0026quot;， \u0026quot;\\x00A9 1999-2001\u0026quot;。 如果紧跟十六进制码后一位的字符也能解释成十六进制码时， 就必须把 4 位补全，否则 FreeMarker 就会误解你的意图。\nFTL 中的保留名称 下面的这些名称不能在非方括号语法中被用作顶层变量 (比如 .vars[\u0026quot;in\u0026quot;])，因为这是 FTL 中的关键字：\ntrue：布尔值\u0026quot;true\u0026quot; false：布尔值\u0026quot;false\u0026quot; gt：比较运算符\u0026quot;大于\u0026quot; gte：比较运算符\u0026quot;大于或等于\u0026quot; lt：比较运算符\u0026quot;小于\u0026quot; lte：比较运算符\u0026quot;小于或等于\u0026quot; as：由少数指令使用 in：由少数指令使用 using：由少数指令使用 ","permalink":"https://tofuwine.github.io/posts/28095def/","summary":"FreeMarker 基本语法介绍","title":"FreeMarker 基本用法"},{"content":"ManagementFactory ManagementFactory 是一个为我们提供各种获取 JVM 信息的工厂类，使用 ManagementFactory 可以获取大量的运行时 JVM 信息，比如 JVM 堆的使用情况，GC 情况，线程信息等。通过这些数据项我们可以了解正在运行的 JVM 的情况，以便我们可以做出相应的调整。\n使用 ManagementFactory 获取运行时进程 PID 方式如下：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.lang.management.ManagementFactory; public class JVMUtil { /** * 方式一: 根据 SystemProperties 获取 PID * * @since JDK 1.5 */ public static long getPID() { return Long.parseLong(ManagementFactory.getRuntimeMXBean().getSystemProperties().get(\u0026#34;PID\u0026#34;)); } /** * 方式二: 根据 Name 截取 PID * * @since JDK 1.5 */ public static long getPID() { return Long.parseLong(ManagementFactory.getRuntimeMXBean().getName().split(\u0026#34;@\u0026#34;)[0]); } /** * 方式三: 直接获取 PID * * @since JDK 10 */ public static long getPID() { return ManagementFactory.getRuntimeMXBean().getPid(); } } ApplicationPidFileWriter 官方文档参考：Process Monitoring 在任何 Java 工程中我们可以将 ManagementFactory 方式封装成一个工具类使用，如果我们基于 Spring Boot 搭建工程，也可使用其提供的机制进行获取 PID。\nApplicationPidFileWriter 是 Spring Boot 提供的一个 Listener，它可以在应用启动后把 PID 写入到指定的文件，具体实现方式如下：\n修改启动类：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.context.ApplicationPidFileWriter; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication app = new SpringApplicationBuilder() .listeners(new ApplicationPidFileWriter()) .sources(Application.class) .build(args); app.run(args); } } 默认会将 pid 写入到 appplication.pid 文件中。\n也可修改配置文件（以 application.properties 为例）：\nproperties 1 2 3 4 # PID 写入的文件名 spring.pid.file=app.pid # PID 写入失败是否抛出异常 spring.pid.fail-on-write-error=false 如此配置后，在启动 Spring Boot 工程后，会将当前 PID 写入到 spring.pid.file 指定的文件中。\nJPS JDK 提供了 jps 命令。（JDK 提供的工具，需在机器上安装 JDK 并正确配置环境变量）\n直接在终端输入 jps，即可列出所有 Java 进程的 PID 及对应的进程名称。\nPS 如果应用运行在 Linux 系统，同时机器未安装 JDK，那么可以通过 ps 命令配合表达式来查询指定进程的 PID：\nshell 1 ps -ef | grep your-jar-name.jar 命令说明：\nps 是一个用于查询当前运行进程的命令 -ef 是 ps 命令的选项，用于显示所有进程的详细信息，包括进程的用户、进程 ID（PID）、父进程 ID（PPID）、CPU 使用情况等。 | 是管道符号，用于将一个命令的输出作为另一个命令的输入。 grep 是一个用于在文本中搜索指定内容的命令。 your-jar-name.jar 是指要搜索的内容关键字 $! 如果应用运行在 Linux 系统，同时使用 shell 脚本启动应用，则可通过 $! 变量获取应用的 PID：\nshell 1 nohup java -jar your-jar-name.jar \u0026amp; echo $! \u0026gt; app.pid 命令说明：\nnohup：它会忽略 SIGHUP 信号（终端挂起信号），这样即使关闭终端，进程也会继续运行。 \u0026amp;：将命令置于后台运行。 echo $! \u0026gt; app.pid 将刚刚启动的进程 PID 写入到文件 app.pid 中。 ","permalink":"https://tofuwine.github.io/posts/5d7a2ee8/","summary":"本文介绍 Java 获取应用 PID 的几种方式","title":"Java 获取应用 PID"},{"content":"Overview 当创建一个 bean definition 时，实际上创建了一个用于创建该 bean definition 所定义类的实例的 recipe (配方)。 将 bean 定义视为 recipe (配方) 的概念很重要，这意味着，你可以从单个配方中创建许多对象实例，就像类一样。\n你不仅可以控制从特定 bean definition 创建的对象中插入各种依赖项和配置值，还可以控制从特定 bean definition 创建的对象的作用域。 这种方法强大且灵活，你可以通过配置选择创建对象的作用域，而不是在 Java 类级别固定对象的作用域。\nSpring 框架支持六种作用域，其中四种仅在使用 Web-aware ApplicationContext 时可用。 此外，你还可以创建自定义作用域。\n下表描述了支持的作用域：\nScope Description singleton (Default) Scopes a single bean definition to a single object instance for each Spring IoC container. prototype Scopes a single bean definition to any number of object instances. request Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext . session Scopes a singe bean definition to the lifecycle of an HTTP Session . Only valid in the context of a web-aware Spring ApplicationContext . application Scopes a single bean definition to the lifecycle of a ServletContext . Only valid in the context of a web-aware Spring ApplicationContext . websocket Scopes a single bean definition to the lifecycle of a WebSocket . Only valid in the context of a web-aware Spring ApplicationContext . The Singleton Scope 单例作用域是 Spring 中的默认作用域\n当定义一个 bean 定义，并将该 bean 定义的作用域设置为 Singleton 时，Spring IoC 容器会创建该 bean 定义所定义的对象的一个实例。 这个单一实例被存储在这些单例 bean 的缓存中，所有对于该命名 bean 的后续请求和应用都会返回该缓存的对象。\n下图展示了单例作用域的工作原理：\nSpring 框架中的单例 Bean 的概念与设计模式中定义的单例模式有所不同。设计模式中的单例模式将对象的作用域硬编码为每个 ClassLoader 仅创建一个特定类的实例。Spring 中单例的作用域最好描述为每个容器和每个 Bean。这意味着，如果你在一个 Spring 容器中为特定类定义了一个 bean，Spring 容器将只创建一个该 bean definition 所定义类的实例。\n要在 XML 中将一个 bean 定义为 Singleton，你可以按照以下示例定义一个 bean：\nxml 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026#34;\u0026gt; \u0026lt;bean id=\u0026#34;accountService\u0026#34; class=\u0026#34;com.something.DefaultAccountService\u0026#34;/\u0026gt; \u0026lt;!-- the following is equivalent, though redundant (singleton scope is the default) --\u0026gt; \u0026lt;bean id=\u0026#34;accountService\u0026#34; class=\u0026#34;com.something.DefaultAccountService\u0026#34; scope=\u0026#34;singleton\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; 要在 Spring Boot 中将一个 bean 定义为 Singleton，你可以按照以下示例定义一个 bean：\njava 1 2 3 4 5 6 7 8 9 import org.springframework.beans.factory.config.ConfigurableBeanFactory; import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Component; @Component @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON) public class DefaultAccountService { // some definition } 由于单例作用域是 Spring 默认的作用域，因此，对于作用域需要定义为 Singleton 的 bean，无需添加 @Scope 注解。\nSingleton Scope 最佳实践 在使用 Singleton Scope 时，你应该注意一些最佳实践：\n无状态✅。尽可能使你的 Singleton Bean 无状态。有状态的 Singleton 会导致与共享状态相关的难以调试的问题，尤其是在多线程环境中。 线程安全✅。如果你的 Singleton Bean 有状态，请确保它们是线程安全的，因为 Singleton Bean 是跨多个线程共享的。 延迟初始化✅。如果你的 Singleton Bean 在启动过程中会占用大量资源，请考虑对其使用延迟初始化。这可以通过在 Bean Definition 中添加 @Lazy 注解来实现。 请记住，Singleton Scope 的关键在于了解每个 Spring IoC 容器只有一个实例。因此，与 Singleton Bean 的每次交互都将与相同状态交互，因此应进行相应的设计。\nThe Prototype Scope 非单例的原型（Prototype）作用域的 bean 部署会在每次请求特定 bean 时创建一个新的 bean 示例。换句话说：当将 bean 注入到另一个 bean 中或通过容器的 getBean() 方法调用请求它时，都会创建一个新的实例。\n通常情况下，应该将原型作用域用于所有有状态（stateful）的 bean，而将单例作用域用于无状态（stateless）的 bean。\n下图说明了 Spring 的原型（Prototype）作用域：\nDAO (A data access object) 通常不会配置为原型，因为典型的 DAO 不保存任何会话状态。\n以下示例在 XML 中将一个 bean 定义为原型：\nxml 1 2 3 4 5 6 7 8 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026#34;\u0026gt; \u0026lt;bean id=\u0026#34;accountService\u0026#34; class=\u0026#34;com.something.DefaultAccountService\u0026#34; scope=\u0026#34;prototype\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; 以下示例在 Spring Boot 中将一个 bean 定义为原型：\njava 1 2 3 4 5 @Component @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE) public class DefaultAccountService { // some definition } 与其他作用域不同，Spring 不管理原型 bean 的完整生命周期。容器实例化、配置和组装原型对象，并将其交给客户端，不再记录该原型 bean。因此，尽管对所有对象调用初始化生命周期回调方法（无论作用域如何），但对于原型，配置的销毁生命周期回调方法不会被调用。客户端代码必须清理原型作用域对象并释放原型 bean 持有的昂贵资源。\n要让 Spring 容器释放原型作用域 bean 持有的资源，可以尝试使用一个持有需要清理的 bean 引用的自定义 bean 后处理器。\n在某些方面，Spring 容器对于原型作用域 bean 的角色可以看作是 Java 中的 new 操作符的替代品。在那之后所有生命周期管理都必须由客户端处理。（有关 Spring 容器中 bean 生命周期的详细信息，请参阅生命周期回调）\n如果在单例作用域的 bean 中注入一个原型作用域 bean，需要额外的处理，请参考 Singleton Beans with Prototype-bean Dependencies\nPrototype Scope 最佳实践 请记住 Spring 不会管理 Prototype Bean 的整个生命周期：不会调用销毁生命周期回调。客户端代码必须清理 Prototype Scope 对象，并释放 Prototype Bean 持有的资源。 尽量少用 Prototype Scope。每次需要创建一个新的 Bean 实例时，都会耗费大量内存和处理时间，特别是对于重量级的有状态 Bean。 如果你将具有 Prototype Scope 的 Bean 注入到 Singleton Bean 中，则 Prototype Bean 的行为仍与 Singleton Bean 相同。这是因为 Singleton Bean 只创建一次，因此只会注入 Prototype Bean 的一个实例。要解决整个问题，你可以使用 Spring 的方法注入功能。 Web Aware Scopes 在实践中，很少使用这些作用域。\n作用域 request、session、application、websocket 仅在 Web Application Context 中可用（例如，XmlWebApplicationContext），如果你尝试在常规的 Spring IoC 容器（例如，ClassPathXmlApplicationContext ）中使用这些作用域，将会抛出 IllegalStateException 异常，报告未知的 Bean 作用域。注：常规 Spring Boot 工程可用。\n作用域 request 为单个 HTTP 请求创建一个 Bean 实例，而作用域 session 则为 HTTP 会话创建一个 Bean 实例。\n作用域 application 为 ServletContext 的生命周期创建一个 Bean 实例，而作用域 websocket 为特定的 WebScoket 会话创建一个 Bean 实例。\nRequest Scope 可以使用如下方式定义一个作用域 request 的 Bean：\njava 1 2 3 4 5 6 7 8 9 10 import org.springframework.context.annotation.Scope; import org.springframework.context.annotation.ScopedProxyMode; import org.springframework.stereotype.Component; import org.springframework.web.context.WebApplicationContext; @Component @Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS) public class HelloMessageGenerator { // some definition } proxyMode 属性是必要的，因为在实例化 Web Application Context 时，没有活动的请求。Spring 创建一个代理来作为注入依赖，并在需要时在请求中实例化目标 Bean。\n此外，还可以使用一个组合的注解 @RequestScope 来充当上述定义的快捷方式（推荐）：\njava 1 2 3 4 5 6 7 8 import org.springframework.stereotype.Component; import org.springframework.web.context.annotation.RequestScope; @Component @RequestScope public class HelloMessageGenerator { // some definition } Session Scope 我们也可以用相似的方式定义作用域 session 的 Bean：\njava 1 2 3 4 5 6 7 8 9 10 import org.springframework.context.annotation.Scope; import org.springframework.context.annotation.ScopedProxyMode; import org.springframework.stereotype.Component; import org.springframework.web.context.WebApplicationContext; @Component @Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS) public class HelloMessageGenerator { // some definition } 同样的，也可以用一个组合注解 @SessionScope 来简化定义：\njava 1 2 3 4 5 6 7 8 import org.springframework.stereotype.Component; import org.springframework.web.context.annotation.SessionScope; @Component @SessionScope public class HelloMessageGenerator { // some definition } Application Scope application 作用域为 ServletContext 的生命周期创建一个 Bean 实例。这与 singleton 作用域类似，但是就 Bean 的作用域而言有一个非常重要的区别：\n当 Bean 是 application 作用域时，相同的 Bean 实例在运行在同一个 ServletContext 中的多个基于 Servlet 的应用程序之间共享，而 singleton 作用域的 Bean 仅作用于单个应用程序上下文。\n你可以按如下方式创建 application 作用域的 Bean：\njava 1 2 3 4 5 6 7 8 9 10 import org.springframework.context.annotation.Scope; import org.springframework.context.annotation.ScopedProxyMode; import org.springframework.stereotype.Component; import org.springframework.web.context.WebApplicationContext; @Component @Scope(value = WebApplicationContext.SCOPE_APPLICATION, proxyMode = ScopedProxyMode.TARGET_CLASS) public class HelloMessageGenerator { // some definition } 以简洁的方式（@ApplicationScope) 定义：\njava 1 2 3 4 5 6 7 8 import org.springframework.stereotype.Component; import org.springframework.web.context.annotation.ApplicationScope; @Component @ApplicationScope public class HelloMessageGenerator { // some definition } WebSocket Scope websocket 作用域与 WebSocket 会话的生命周期相关联，并适用于 STOMP over WebSocket 应用程序。详情可参阅 WebSocket Scope。\n定义 websocket 作用域的 Bean：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @Component @Scope(scopeName = \u0026#34;websocket\u0026#34;, proxyMode = ScopedProxyMode.TARGET_CLASS) public class MyBean { @PostConstruct public void init() { // Invoked after dependencies injected } // ... @PreDestroy public void destroy() { // Invoked when the WebSocket session ends } } @Controller public class MyController { private final MyBean myBean; @Autowired public MyController(MyBean myBean) { this.myBean = myBean; } @MessageMapping(\u0026#34;/action\u0026#34;) public void handle() { // this.myBean from the current WebSocket session } } Custom Scopes 除了以上 Spring 已经定义好的 Scope 之外，你也可以定义自己的 Scope。如果你有兴趣，请参考官方文档。本文不再赘述。\nFAQ Singleton Beans with Prototype-bean Dependencies 当在单例作用域的 bean 依赖原型作用域的 bean 时，请注意依赖项在实例化时解析。因此，如果你将一个原型作用域的 bean 依赖注入到一个单例作用域的 bean 中，会实例化一个新的原型 bean，然后将其依赖注入到单例 bean 中。这个原型实例是唯一供给这个单例作用域 bean 的实例。\n然而，假设你希望单例作用域的 bean 在运行时重复获取原型作用域 bean 的新实例。你不能将一个原型作用域的 bean 注入到你的单例 bean 中，因为当 Spring 容器实例化单例 bean 并解析和注入其依赖项时，这种注入只发生一次。如果你需要在运行时多次获得原型 bean 的新实例，请参阅方法注入或按下述 SonarLint 提供的方式注入。\nSonarLint 详细内容请参阅：SonarLint Java Rule: RSPEC-6832\n错误示例：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @Component @Scope(\u0026#34;prototype\u0026#34;) public class PrototypeBean { public Object execute() { //... } } public class SingletonBean { private PrototypeBean prototypeBean; @Autowired public SingletonBean(PrototypeBean prototypeBean) { // Noncompliant, the same instance of PrototypeBean is used for each bean request. this.prototypeBean = prototypeBean; } public Object process() { return prototypeBean.execute(); } } 正确示例：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @Component @Scope(\u0026#34;prototype\u0026#34;) public class PrototypeBean { public Object execute() { //... } } public class SingletonBean implements ApplicationContextAware { private ApplicationContext applicationContext; @Autowired public SingletonBean(ApplicationContext applicationContext) { this.applicationContext = applicationContext; } public Object process() { PrototypeBean prototypeBean = createPrototypeBean(); return prototypeBean.execute(); } protected PrototypeBean createPrototypeBean() { return this.applicationContext.getBean(\u0026#34;prototypeBean\u0026#34;, PrototypeBean.class); } } 如果在单例作用域的 bean 注入 Request 作用域的 bean 方式如下：\n错误示例：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Component @Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS) public class RequestBean { //... } public class SingletonBean { @Autowired private final RequestBean requestBean; // Noncompliant, the same instance of RequestBean is used for each HTTP request. public RequestBean getRequestBean() { return requestBean; } } 正确示例：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Component @Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS) public class RequestBean { //... } public class SingletonBean { private final ObjectFactory\u0026lt;RequestBean\u0026gt; requestBeanFactory; @Autowired public SingletonBean(ObjectFactory\u0026lt;RequestBean\u0026gt; requestBeanFactory) { this.requestBeanFactory = requestBeanFactory; } public RequestBean getRequestBean() { return requestBeanFactory.getObject(); } } References Bean Scopes :: Spring Framework Quick Guide to Spring Bean Scopes | Baeldung Spring Bean Scope 指南 - spring 中文网 (springdoc.cn) ","permalink":"https://tofuwine.github.io/posts/4e4e186a/","summary":"Spring Bean 六种作用域分析","title":"Spring Bean Scope 解析"},{"content":"1994 年，Linux 引入了文件系统层次标准（FHS，Filesystem Hierarchy Standard）。通过实施 FHS 这样的标准，软件可以确保在不同 Linux 发行版中采用一致的布局。不过，并非所有 Linux 发行版都严格遵守这一标准。它们通常会加入自己独特的元素或迎合特定的要求。\n要熟练掌握这一标准，可以从探索开始。使用 cd 等命令进行导航，使用 ls 命令列出目录内容。将文件系统想象成一棵树，从根目录 / 开始。\n目录 介绍 补充 / 根目录 根目录是 Linux 文件系统中的顶级目录。 所有其他目录都是根目录的子目录，使其成为整个文件系统的父目录。 /bin 包含启动系统和执行基本操作所需的基本二进制可执行文件。 这些对所有用户都可用。 /boot 保存启动系统所需的文件。 包括 Linux 内核、初始 RAM 磁盘映像（用于启动时所需的驱动程序）和引导加载程序配置文件（如 GRUB）。 /dev 包含代表硬件组成或其他系统设备的设备文件。 例如，/dev/sda 代表第一个 SATA 驱动器，/dev/tty 代表终端。 /etc 存储系统和应用程序的配置文件。 这些文件通常是可以编辑的文本文件，用于更改系统或应用程序的行为。 /home 包含系统上所有有账户的用户的个人目录，根用户除外。 用户特定的设置和文件存储在此处。 /lib 包含系统和应用程序运行所需的基本共享库和内核模块。 /media /mnt 用于挂载可移动媒体（如 USB 驱动器）和临时挂载的文件系统的目录。 /opt 用于安装附加的应用软件包。 它是安装第三方应用程序的地方，将它们与 /usr 中的系统默认应用程序分开。 /proc 一个虚拟文件系统，为内核向进程发送信息提供了一种机制。 它不包含真实文件，而是运行时系统信息（例如，系统内存、挂载的设备、硬件配置等）。 /sbin 包含基本的系统二进制文件。 类似 /bin，但用于系统管理任务，通常对非特权用户不可访问。 /tmp 一个临时目录，应用程序可以在其中存储临时文件。 它通常在重启或间隔一段时间后被清空。 /usr 承载用户应用程序和大量系统内容。 它包含程序、库、文档等的子目录，这些不是启动或修复系统所必需的。 /var 包含变量数据文件。 这个目录包括系统在操作过程中写入数据的文件，如日志（/var/log）、邮件（/var/mail）和打印队列（/var/spool）等。 ","permalink":"https://tofuwine.github.io/posts/715f7034/","summary":"1994 年，Linux 引入了文件系统层次标准（FHS，Filesystem Hierarchy Standard）。通过实施 FHS 这样的标准，软件可以确保在不同 Linux 发行版中采用一致的布局。不过，并非所有 Linux 发行版都严格遵守这一标准。它们通常会加入自己独特的元素或迎合特定的要求。\n要熟练掌握这一标准，可以从探索开始。使用 cd 等命令进行导航，使用 ls 命令列出目录内容。将文件系统想象成一棵树，从根目录 / 开始。\n目录 介绍 补充 / 根目录 根目录是 Linux 文件系统中的顶级目录。 所有其他目录都是根目录的子目录，使其成为整个文件系统的父目录。 /bin 包含启动系统和执行基本操作所需的基本二进制可执行文件。 这些对所有用户都可用。 /boot 保存启动系统所需的文件。 包括 Linux 内核、初始 RAM 磁盘映像（用于启动时所需的驱动程序）和引导加载程序配置文件（如 GRUB）。 /dev 包含代表硬件组成或其他系统设备的设备文件。 例如，/dev/sda 代表第一个 SATA 驱动器，/dev/tty 代表终端。 /etc 存储系统和应用程序的配置文件。 这些文件通常是可以编辑的文本文件，用于更改系统或应用程序的行为。 /home 包含系统上所有有账户的用户的个人目录，根用户除外。 用户特定的设置和文件存储在此处。 /lib 包含系统和应用程序运行所需的基本共享库和内核模块。 /media /mnt 用于挂载可移动媒体（如 USB 驱动器）和临时挂载的文件系统的目录。 /opt 用于安装附加的应用软件包。 它是安装第三方应用程序的地方，将它们与 /usr 中的系统默认应用程序分开。 /proc 一个虚拟文件系统，为内核向进程发送信息提供了一种机制。 它不包含真实文件，而是运行时系统信息（例如，系统内存、挂载的设备、硬件配置等）。 /sbin 包含基本的系统二进制文件。 类似 /bin，但用于系统管理任务，通常对非特权用户不可访问。 /tmp 一个临时目录，应用程序可以在其中存储临时文件。 它通常在重启或间隔一段时间后被清空。 /usr 承载用户应用程序和大量系统内容。 它包含程序、库、文档等的子目录，这些不是启动或修复系统所必需的。 /var 包含变量数据文件。 这个目录包括系统在操作过程中写入数据的文件，如日志（/var/log）、邮件（/var/mail）和打印队列（/var/spool）等。 ","title":"Linux 文件系统的组成"},{"content":" 温馨提示 本文采用 KaTex 渲染数学公式。 基本语法 Markdown 数学公式：使用 $。\n内联显示将数学公式写在 $...$ 之间。块显示则将数学公式写在 $$...$$ 之间。\n常用符号 上下标 算式 markdown \\$a_0\\$, \\$a_{pre}\\$ a_0, a_{pre} \\$a^0\\$, \\$a^{[0]}\\$ a^0, a^{[0]} 括号 算式 markdown \\$(\\$, \\$)\\$ (, ) \\$[\\$, \\$]\\$ [, ] \\$\\lang\\$, \\$\\rang\\$ \\lang, \\rang 或 \\langle, \\rangle \\$\\lvert\\$, \\$\\rvert\\$ \\lvert, \\rvert \\$\\lVert\\$, \\$\\rVert\\$ \\lVert, \\rVert \\$\\lbrace\\$, \\$\\rbrace\\$ \\lbrace, \\rbrace 或\\{, \\} 增大括号方法 算式 markdown \\$(x)\\$ (x) \\$\\big( x \\big)\\$ \\big( x \\big) \\$\\Big( x \\Big)\\$ \\Big( x \\Big) \\$\\bigg( x \\bigg)\\$ \\bigg( x \\bigg) \\$\\Bigg( x \\Bigg)\\$ \\Bigg( x \\Bigg) 其他的大括号 算式 markdown \\$\\Bigg(\\bigg(\\Big(\\big((x)\\big)\\Big)\\bigg)\\Bigg)\\$ \\Bigg(\\bigg(\\Big(\\big((x)\\big)\\Big)\\bigg)\\Bigg) \\$\\Bigg[\\bigg[\\Big[\\big[[x]\\big]\\Big]\\bigg]\\Bigg]\\$ \\Bigg[\\bigg[\\Big[\\big[[x]\\big]\\Big]\\bigg]\\Bigg] \\$\\Bigg \\langle \\bigg \\langle \\Big \\langle\\big\\langle\\langle x \\rangle \\big \\rangle\\Big\\rangle\\bigg\\rangle\\Bigg\\rangle\\$ \\Bigg \\langle \\bigg \\langle \\Big \\langle\\big\\langle\\langle x \\rangle \\big \\rangle\\Big\\rangle\\bigg\\rangle\\Bigg\\rangle \\$\\Bigg\\lvert\\bigg\\lvert\\Big\\lvert\\big\\lvert\\lvert x \\rvert\\big\\rvert\\Big\\rvert\\bigg\\rvert\\Bigg\\rvert\\$ \\Bigg\\lvert\\bigg\\lvert\\Big\\lvert\\big\\lvert\\lvert x \\rvert\\big\\rvert\\Big\\rvert\\bigg\\rvert\\Bigg\\rvert \\$\\Bigg\\lVert\\bigg\\lVert\\Big\\lVert\\big\\lVert\\lVert x \\rVert\\big\\rVert\\Big\\rVert\\bigg\\rVert\\Bigg\\rVert\\$ \\Bigg\\lVert\\bigg\\lVert\\Big\\lVert\\big\\lVert\\lVert x \\rVert\\big\\rVert\\Big\\rVert\\bigg\\rVert\\Bigg\\rVert 分数 算式 markdown \\$\\frac{a}{b}\\$ \\frac{a}{b} 开方 算式 markdown \\$\\sqrt{a + b}\\$ \\sqrt{a + b} \\$\\sqrt[n]{a + b}\\$ \\sqrt[n]{a + b} 累加/累乘 算式 markdown \\$\\sum_{i = 0}^{n}\\frac{1}{i^2}\\$ \\sum_{i = 0}{n}\\frac{1}{i2} \\$\\prod_{i = 0}^{n}\\frac{1}{x^2}\\$ \\prod_{i = 0}{n}\\frac{1}{x2} 三角函数 算式 markdown \\$\\sin\\$ \\sin \\$\\cos\\$ \\cos \\$\\tan\\$ \\tan \\$\\cot\\$ \\cot \\$\\sec\\$ \\sec \\$\\csc\\$ \\csc \\$\\bot\\$ \\bot \\$\\angle\\$ \\angle \\$40^\\circ\\$ 40^\\circ 对数函数 算式 markdown \\$\\ln{a + b}\\$ \\ln{a + b} \\$\\log_{a}^{b}\\$ \\log_{a}^{b} \\$\\lg{a + b}\\$ \\lg{a + b} 二元运算符 算式 markdown 描述 算式 markdown 描述 \\$\\pm\\$ \\pm 正负号 \\$\\triangleleft\\$ \\triangleleft \\$\\mp\\$ \\mp \\$\\triangleright\\$ \\triangleright \\$\\times\\$ \\times 乘号 \\$\\lhd\\$ \\lhd \\$\\div\\$ \\div 除号 \\$\\rhd\\$ \\rhd \\$\\ast\\$ \\ast \\$\\unlhd\\$ \\unlhd \\$\\star\\$ \\star \\$\\unrhd\\$ \\unrhd \\$\\mid\\$ \\mid \\$\\bigcirc\\$ \\bigcirc \\$\\nmid\\$ \\nmid \\$\\odot\\$ \\odot \\$\\circ\\$ \\circ \\$\\bigodot\\$ \\bigodot \\$\\bullet\\$ \\bullet \\$\\oslash\\$ \\oslash \\$\\cdot\\$ \\cdot \\$\\ominus\\$ \\ominus \\$\\wr\\$ \\wr \\$\\otimes\\$ \\otimes \\$\\diamond\\$ \\diamond \\$\\bigotimes\\$ \\bigotimes \\$\\Diamond\\$ \\Diamond \\$\\oplus\\$ \\oplus \\$\\triangle\\$ \\triangle \\$\\bigoplus\\$ \\bigoplus \\$\\bigtriangleup\\$ \\bigtriangleup \\$\\dagger\\$ \\dagger \\$\\bigtriangledown\\$ \\bigtriangledown \\$\\ddagger\\$ \\ddagger \\$\\amalg\\$ \\amalg 关系符号 算式 markdown 描述 算式 markdown 描述 \\$\\leq\\$ \\leq 小于等于 \\$\\models\\$ \\models \\$\\geq\\$ \\geq 大于等于 \\$\\prec\\$ \\prec \\$\\equiv\\$ \\equiv \\$\\succ\\$ \\succ \\$\\sim\\$ \\sim \\$\\perp\\$ \\perp \\$\\preceq\\$ \\preceq \\$\\succeq\\$ \\succeq \\$\\simeq\\$ \\simeq \\$\\mid\\$ \\mid \\$\\ll\\$ \\ll \\$\\gg\\$ \\gg \\$\\asymp\\$ \\asymp \\$\\parallel\\$ \\parallel \\$\\approx\\$ \\approx 约等于 \\$\\cong\\$ \\cong \\$\\neq\\$ \\neq 不等于 \\$\\doteq\\$ \\doteq \\$\\propto\\$ \\propto \\$\\bowtie\\$ \\bowtie \\$\\Join\\$ \\Join \\$\\smile\\$ \\smile \\$\\frown\\$ \\frown \\$\\vdash\\$ \\vdash \\$\\dashv\\$ \\dashv 极限 算式 markdown \\$\\lim\\$ \\lim \\$\\rightarrow\\$ \\rightarrow 或 \\to \\$\\infty\\$ \\infty \\$\\lim_{n \\to +\\infty}n\\$ \\lim_{n \\to +\\infty}n 向量 算式 markdown \\$\\vec{a}\\$ \\vec{a} 箭头 算式 markdown 描述 算式 markdown 描述 \\$\\uparrow\\$ \\uparrow \\$\\downarrow\\$ \\downarrow \\$\\updownarrow\\$ \\updownarrow \\$\\Uparrow\\$ \\Uparrow \\$\\Downarrow\\$ \\Downarrow \\$\\Updownarrow\\$ \\Updownarrow \\$\\rightarrow\\$ \\rightarrow \\$\\leftarrow\\$ \\leftarrow \\$\\leftrightarrow\\$ \\leftrightarrow \\$\\Rightarrow\\$ \\Rightarrow \\$\\Leftarrow\\$ \\Leftarrow \\$\\Leftrightarrow\\$ \\Leftrightarrow \\$\\longrightarrow\\$ \\longrightarrow \\$\\longleftarrow\\$ \\longleftarrow \\$\\longleftrightarrow\\$ \\longleftrightarrow \\$\\Longrightarrow\\$ \\Longrightarrow \\$\\Longleftarrow\\$ \\Longleftarrow \\$\\Longleftrightarrow\\$ \\Longleftrightarrow \\$\\mapsto\\$ \\mapsto \\$\\longmapsto\\$ \\longmapsto \\$\\hookleftarrow\\$ \\hookleftarrow \\$\\hookrightarrow\\$ \\hookrightarrow \\$\\rightharpoonup\\$ \\rightharpoonup \\$\\leftharpoondown\\$ \\leftharpoondown \\$\\rightleftharpoons\\$ \\rightleftharpoons \\$\\leftharpoonup\\$ \\leftharpoonup \\$\\rightharpoondown\\$ \\rightharpoondown \\$\\leadsto\\$ \\leadsto \\$\\nearrow\\$ \\nearrow \\$\\searrow\\$ \\searrow \\$\\swarrow\\$ \\swarrow \\$\\nwarrow\\$ \\nwarrow 集合 算式 markdown 描述 算式 markdown 描述 \\$\\emptyset\\$ \\emptyset \\$\\in\\$ \\in \\$\\ni\\$ \\ni \\$\\notin\\$ \\notin \\$\\subset\\$ \\subset \\$\\supset\\$ \\supset \\$\\not\\subset\\$ \\not\\subset \\$\\subseteq\\$ \\subseteq \\$\\supseteq\\$ \\supseteq \\$\\cup\\$ \\cup \\$\\bigcup\\$ \\bigcup \\$\\cap\\$ \\cap \\$\\bigcap\\$ \\bigcap \\$\\uplus\\$ \\uplus \\$\\biguplus\\$ \\biguplus \\$\\sqsubset\\$ \\sqsubset \\$\\sqsupset\\$ \\sqsupset \\$\\sqcap\\$ \\sqcap \\$\\sqsubseteq\\$ \\sqsubseteq \\$\\sqsupseteq\\$ \\sqsupseteq \\$\\vee\\$ \\vee \\$\\wedge\\$ \\wedge \\$\\setminus\\$ \\setminus 微积分 算式 markdown \\$\\prime\\$ \\prime \\$\\int\\$ \\int \\$\\iint\\$ \\iint \\$\\iiint\\$ \\iiint \\$\\oint\\$ \\oint \\$\\nabla\\$ \\nabla \\$\\int_0^2 x^2 dx\\$ \\int_0^2 x^2 dx 逻辑运算 算式 markdown \\$\\because\\$ \\because \\$\\therefore\\$ \\therefore \\$\\forall\\$ \\forall \\$\\exist\\$ \\exist \\$\\vee\\$ \\vee \\$\\wedge\\$ \\wedge \\$\\bigvee\\$ \\bigvee \\$\\bigwedge\\$ \\bigwedge 上下标符号 算式 markdown \\$\\bar{a}\\$ \\bar{a} \\$\\acute{a}\\$ \\acute{a} \\$\\breve{a}\\$ \\breve{a} \\$\\grave{a}\\$ \\grave{a} \\$\\dot{a}\\$ \\dot{a} \\$\\ddot{a}\\$ \\ddot{a} \\$\\hat{a}\\$ \\hat{a} \\$\\check{a}\\$ \\check{a} \\$\\breve{a}\\$ \\breve{a} \\$\\tilde{a}\\$ \\tilde{a} \\$\\vec{a}\\$ \\vec{a} \\$\\overline{a + b + c + d}\\$ \\overline{a + b + c + d} \\$\\underline{a + b + c + d}\\$ \\underline{a + b + c + d} \\$\\overbrace{a + b + c + d}\\$ \\overbrace{a + b + c + d} \\$\\underbrace{a + b + c + d}\\$ \\underbrace{a + b + c + d} \\$\\overbrace{a + \\underbrace{b + c}_{1.0} + d}^{2.0}\\$ \\overbrace{a + \\underbrace{b + c}_{1.0} + d}^{2.0} 希腊字母 大写 markdown 小写 markdown \\$\\Alpha\\$ \\Alpha \\$\\alpha\\$ \\alpha \\$\\Beta\\$ \\Beta \\$\\beta\\$ \\beta \\$\\Gamma\\$ \\Gamma \\$\\gamma\\$ \\gamma \\$\\Delta\\$ \\Delta \\$\\delta\\$ \\delta \\$\\Epsilon\\$ \\Epsilon \\$\\epsilon\\$ \\epsilon \\$\\varepsilon\\$ \\varepsilon \\$\\Zeta\\$ \\Zeta \\$\\zeta\\$ \\zeta \\$\\Eta\\$ \\Eta \\$\\eta\\$ \\eta \\$\\Theta\\$ \\Theta \\$\\theta\\$ \\theta \\$\\Iota\\$ \\Iota \\$\\iota\\$ \\iota \\$\\Kappa\\$ \\Kappa \\$\\kappa\\$ \\kappa \\$\\Lambda\\$ \\Lambda \\$\\lambda\\$ \\lambda \\$\\Mu\\$ \\Mu \\$\\mu\\$ \\mu \\$\\Nu\\$ \\Nu \\$\\nu\\$ \\nu \\$\\Xi\\$ \\Xi \\$\\xi\\$ \\xi \\$\\Omicron\\$ \\Omicron \\$\\omicron\\$ \\omicron \\$\\Pi\\$ \\Pi \\$\\pi\\$ \\pi \\$\\Rho\\$ \\Rho \\$\\rho\\$ \\rho \\$\\Sigma\\$ \\Sigma \\$\\sigma\\$ \\sigma \\$\\Tau\\$ \\Tau \\$\\tau\\$ \\tau \\$\\Upsilon\\$ \\Upsilon \\$\\upsilon\\$ \\upsilon \\$\\Phi\\$ \\Phi \\$\\phi\\$ \\phi \\$\\varphi\\$ \\varphi \\$\\Chi\\$ \\Chi \\$\\chi\\$ \\chi \\$\\Psi\\$ \\Psi \\$\\psi\\$ \\psi \\$\\Omega\\$ \\Omega \\$\\omega\\$ \\omega 省略号 算式 markdown \\$\\dots\\$ \\dots \\$\\ldots\\$ \\ldots \\$\\cdots\\$ \\cdots \\$\\vdots\\$ \\vdots \\$\\ddots\\$ \\ddots 例子如下：\nmarkdown 1 2 3 $$ x_1, x_2, \\dots, x_n \\quad \\quad 1, 2, \\cdots, n \\quad \\quad \\vdots \\quad \\quad \\ddots $$ $$ x_1, x_2, \\dots, x_n \\quad \\quad 1, 2, \\cdots, n \\quad \\quad \\vdots \\quad \\quad \\ddots $$ 空格 算式 markdown 描述 \\$123\\!123\\$ 123\\!123 空格距离：-3/18 em \\$123\\,123\\$ 123\\,123 空格距离：3/18 em \\$123\\:123\\$ 123\\:123 空格距离：4/18 em \\$123\\ 123\\$ 123\\;123 or 123\\ 123 空格距离：5/18 em \\$123\\quad123\\$ 123\\quad123 空格距离：1 em \\$123\\qquad123\\$ 123\\qquad123 空格距离：2 em 上表中的 em 是指当前文本中文本的字体尺寸\n其他符号 算式 markdown 算式 markdown 算式 markdown \\$\\aleph\\$ \\aleph \\$\\hbar\\$ \\hbar \\$\\imath\\$ \\imath \\$\\jmath\\$ \\jmath \\$\\ell\\$ \\ell \\$\\wp\\$ \\wp \\$\\Re\\$ \\Re \\$\\Im\\$ \\Im \\$\\mho\\$ \\mho \\$\\nabla\\$ \\nabla \\$\\surd\\$ \\surd \\$\\top\\$ \\top \\$\\bot\\$ \\bot \\$\\neg\\$ \\neg \\$\\flat\\$ \\flat \\$\\natural\\$ \\natural \\$\\sharp\\$ \\sharp \\$\\backslash\\$ \\backslash \\$\\partial\\$ \\partial \\$\\Box\\$ \\Box \\$\\clubsuit\\$ \\clubsuit \\$\\diamondsuit\\$ \\diamondsuit \\$\\heartsuit\\$ \\heartsuit \\$\\spadesuit\\$ \\spadesuit \\$\\lceil\\$ \\lceil \\$\\rceil\\$ \\rceil \\$\\lfloor\\$ \\lfloor \\$\\rfloor\\$ \\rfloor 公式 分支公式 markdown 1 2 3 4 5 6 7 8 $$ y= \\begin{cases} -x,\\quad x\\leq 0\\\\ x, \\quad x\u0026gt;0 \\end{cases} \\tag{1} $$ $$ y= \\begin{cases} -x,\\quad x\\leq 0\\\\ x, \\quad x\u003e0 \\end{cases} \\tag{1} $$ 矩阵 不带括号 markdown 1 2 3 4 5 6 7 8 $$ \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{matrix} \\tag{1} $$ $$ \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\tag{1} $$ 括号 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left( \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{matrix} \\right) \\tag{2} $$ $$ \\left( \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\right) \\tag{2} $$ 中括号 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left[ \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{matrix} \\right] \\tag{3} $$ $$ \\left[ \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\right] \\tag{3} $$ 大括号 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left\\{ \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{matrix} \\right\\} \\tag{4} $$ $$ \\left\\{ \\begin{matrix} 1 \u0026 2 \u0026 3\\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\right\\} \\tag{4} $$ 带省略号 markdown 1 2 3 4 5 6 7 8 9 10 11 $$ \\left\\{ \\begin{matrix} a \u0026amp; a \u0026amp; \\cdots \u0026amp; a \\\\ b \u0026amp; b \u0026amp; \\cdots \u0026amp; b \\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ c \u0026amp; c \u0026amp; \\cdots \u0026amp; c \\end{matrix} \\right\\} \\tag{5} $$ $$ \\left\\{ \\begin{matrix} a \u0026 a \u0026 \\cdots \u0026 a\\\\ b \u0026 b \u0026 \\cdots \u0026 b \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ c \u0026 c \u0026 \\cdots \u0026 c \\end{matrix} \\right\\} \\tag{5} $$ 带竖线分割的矩阵 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left[ \\begin{array}{c|cc} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{array} \\right] \\tag{7} $$ $$ \\left[ \\begin{array}{c|cc} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{array} \\right] \\tag{6} $$ 带横线分割的矩阵 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left[ \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ \\hline 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{matrix} \\right] \\tag{7} $$ $$ \\left[ \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\ \\hline 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\right] \\tag{7} $$ 同时带横线和竖线的矩阵 markdown 1 2 3 4 5 6 7 8 9 10 $$ \\left[ \\begin{array}{c|cc} 1 \u0026amp; 2 \u0026amp; 3 \\\\ \\hline 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{array} \\right] \\tag{8} $$ $$ \\left[ \\begin{array}{c|cc} 1 \u0026 2 \u0026 3 \\\\ \\hline 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{array} \\right] \\tag{8} $$ 字符的大小、位置和颜色 调整大小 调整大小时，只需在公式之前添加相应的标识，如 \\Large：\nmarkdown 1 2 3 $$ \\Large E=mc^2 $$ $$ \\Large E=mc^2 $$ 示例 标识 \\$\\Huge E=mc^2\\$ \\Huge \\$\\huge E=mc^2\\$ \\huge \\$\\LARGE E=mc^2\\$ \\LARGE \\$\\Large E=mc^2\\$ \\Large \\$\\large E=mc^2\\$ \\large \\$\\normalsize E=mc^2\\$ \\normalsize (default) \\$\\small E=mc^2\\$ \\small \\$\\footnotesize E=mc^2\\$ \\footnotesize \\$\\scriptsize E=mc^2\\$ \\scriptsize \\$\\tiny E=mc^2\\$ \\tiny 粗体斜体 编码 字体 效果 \\rm 罗马体 \\$\\rm E=mc^2\\$ \\it 意大利体(默认) \\$\\it E=mc^2\\$ \\bf 粗体 \\$\\bf E=mc^2\\$ \\boldsymbol 黑体 \\$\\boldsymbol E=mc^2\\$ \\Bbb 黑板粗体 \\$\\Bbb E=mc^2\\$ 换行 居中 使用 \\\\，对齐使用 align\nmarkdown 1 2 3 4 5 6 7 $$ \\begin{align} x^2-8 \u0026amp; = 2x \\\\ x^2-2x+1 \u0026amp; = 9 \\\\ (x-1)^2 \u0026amp; = (\\pm3)^2 \\end{align} $$ $$ \\begin{align} x^2-8 \u0026 = 2x \\\\ x^2-2x+1 \u0026 = 9 \\\\ (x-1)^2 \u0026 = (\\pm3)^2 \\end{align} $$ 若提示 KaTeX parse error: No such environment: align at position .... 错误，可尝试使用 aligned。\n其他环境：\n环境名称 描述 align 最基本的对齐环境 multline 非对齐环境 gather 无对齐的连续方程 修改颜色 markdown 1 2 3 $$ P\\left(x_{l} \\mid y_{l}\\right) = \\frac{P(x_l,y_l)}{P(y_l)}=\\frac{\\textcolor{#FF0000}{P(y_l\\mid x_l)}P(x_l)}{P(y_l)} $$ $$ P\\left(x_{l} \\mid y_{l}\\right) = \\frac{P(x_l,y_l)}{P(y_l)}=\\frac{\\textcolor{#FF0000}{P(y_l\\mid x_l)}P(x_l)}{P(y_l)} $$ 常用颜色：\nred：红色 green：绿色 blue：蓝色 yellow：黄色 花体字母 编码如下：\nmarkdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $\\mathbb{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathcal{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathscr{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathrm{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathbf{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathit{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathsf{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathtt{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ $\\mathfrak{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}$ 效果依次如下：\n\\$\\mathbb{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathcal{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathscr{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathrm{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathbf{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathit{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathsf{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathtt{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n\\$\\mathfrak{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\$\n参考 https://www.latex-project.org/help/documentation/amsldoc.pdf https://blog.csdn.net/Liu_PiPiPi/article/details/121613743 https://blog.51cto.com/u_15917702/5953725 ","permalink":"https://tofuwine.github.io/posts/2ebecd7d/","summary":"Markdown 数学公式 KaTex 渲染语法","title":"Markdown 数学公式"},{"content":" 文中代码基于 Java 17\nSpring 拦截器与 Servlet Filter 的异同 Spring 的拦截器（Interceptor）与 Servlet 的 Filter 有相似之处，比如二者都是 AOP 编程思想的体现，都能实现权限检查、日志记录等。\n不同的是：\n使用范围不同：Filter 是 Servlet 规范规定的，只能用于 Web 程序中。而拦截器既可以用于 Web 程序，也可以用于 Application、Swing 等程序中。 规范不同：Filter 是 Servlet 规范中定义的，是 Servlet 容器支持的。而拦截器是在 Spring 容器内的，是 Spring 框架支持的。 使用资源不同：同其他代码块一样，Interceptor 也是一个 Spring 的组件，归 Spring 管理，配置在 Spring 文件中，因此能使用 Spring 里的任何资源、对象，例如 Service 对象、数据源、事务管理等，通过 IoC 注入拦截器即可。而 Filter 则不能。 深度不同：Filter 只在 Servlet 前后起作用。而拦截器能够深入到方法前后、异常抛出前后等。因此拦截器的使用具有更大的弹性。所以在 Spring 架构的程序中，要优先使用拦截器。 对于一个请求，拦截器、过滤器执行流程如下：\nflowchart LR A((request)) B(Filter) C(Servlet) D(Interceptor) E(Controller) F((doService)) A --\u003e B --\u003e C --\u003e D --\u003e E --\u003e F 何时使用 Filter、Interceptor？ 如果是非 Spring 项目，那么拦截器不能用，只能使用过滤器。 如果是处理 Controller 前后，既可以使用拦截器也可以使用过滤器。 如果是处理 DispatcherServlet 前后，只能使用过滤器。 Spring Boot 使用 Filter Spring Boot 使用 Filter 有两种方式：\n使用 Spring Boot 提供的 FilterRegistrationBean 注册 Filter 使用原生 Servlet 注解 @WebFilter 定义 Filter 使用 FilterRegistrationBean 注册 Filter 自定义 Filter 并实现 jakarta.servlet.Filter 。（低版本 JDK 请使用 javax.servlet.Filter） java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import jakarta.servlet.Filter; import jakarta.servlet.FilterChain; import jakarta.servlet.ServletException; import jakarta.servlet.ServletRequest; import jakarta.servlet.ServletResponse; import java.io.IOException; public class MyFilter implements Filter { @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { // your code } } 自定义配置类配置 Filter java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import org.springframework.boot.web.servlet.FilterRegistrationBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class WebConfig { @Bean public FilterRegistrationBean\u0026lt;MyFilter\u0026gt; myFilterFilterRegistration() { FilterRegistrationBean\u0026lt;MyFilter\u0026gt; registrationBean = new FilterRegistrationBean\u0026lt;\u0026gt;(); MyFilter myFilter = new MyFilter(); registrationBean.setFilter(myFilter); return registrationBean; } } 使用原生 Servlet 注解 @WebFilter 定义 Filter 自定义 Filter 并实现 jakarta.servlet.Filter （低版本 JDK 请使用 javax.servlet.Filter），同时添加 @WebFilter 注解。 java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import jakarta.servlet.Filter; import jakarta.servlet.FilterChain; import jakarta.servlet.ServletException; import jakarta.servlet.ServletRequest; import jakarta.servlet.ServletResponse; import jakarta.servlet.annotation.WebFilter; import java.io.IOException; @WebFilter public class MyFilter implements Filter { @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { // your code } } 在启动类上添加 @ServletComponentScan 注解 java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.web.servlet.ServletComponentScan; @SpringBootApplication @ServletComponentScan public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 自定义过滤器执行顺序 使用自定义配置类配置过滤器时，可通过 setOrder() 方法设置过滤器执行顺序。如不设置，则按照 Spring Boot Bean 加载顺序。\n使用 Servlet 原生注解 @WebFilter 时，只能通过限定 Filter 类型（按字母表 A - Z 的顺序）。注意：此方式使用 @Order 注解无效。\nSpring Boot 使用 Interceptor 当请求来到 DispatcherServlet 时，它会根据 HandlerMapping 的机制找到处理器，这样就会返回一个 HandlerExecutionChain 对象。这个对象包含处理器和拦截器。这里的拦截器会对处理器进行拦截，这样通过拦截器就可以增强处理器的功能。 ——《深入浅出 Spring Boot 2.X》- 杨开振\n拦截器的设计（Interceptor 接口） 所有的拦截器都需要实现 HandlerInterceptor 接口。该接口主要定义如下：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import org.springframework.lang.Nullable; public interface HandlerInterceptor { default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { return true; } default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception { } default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception { } } 这些方法的执行流程如下：\n执行 preHandler() 方法。该方法会返回一个布尔值。如果为 false ，则结束所有流程；如果为 true ，则执行下一步 执行处理器逻辑。它包含控制器的功能。 执行 postHandle() 方法。 执行视图解析和视图渲染。 执行 afterCompletion() 方法。 开发拦截器 定义简单拦截器 实现 HandlerInterceptor 接口，并实现其方法：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import org.springframework.web.servlet.HandlerInterceptor; import org.springframework.web.servlet.ModelAndView; public class MyInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\u0026#34;处理器执行前方法\u0026#34;); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\u0026#34;处理器执行后方法\u0026#34;); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\u0026#34;处理器完成方法\u0026#34;); } } 注册拦截器 新建配置类并实现 WebMvcConfigurer 接口，重写 addInterceptors(InterceptorRegistry registry) 方法：\njava 1 2 3 4 5 6 7 8 9 10 11 12 13 import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration public class WebConfig implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new MyInterceptor()) .addPathPatterns(\u0026#34;/test/*\u0026#34;); } } 多个拦截器顺序 多个拦截器拦截同一路径时，采用责任链模式的规则，对于处理器前方法采用先注册先执行，而处理后方法和完成方法则是先注册后执行的规则。\n当多个拦截器中某一个处理前（preHandle()）方法为 false 时，则后续拦截器、处理器和所有拦截器的处理器后（ postHandle() ）方法都不会执行。完成方法（ afterCompletion() ）则不一样，它只会执行返回 true 的拦截器的完成方法，而且顺序是先注册后执行。\n","permalink":"https://tofuwine.github.io/posts/68cf2484/","summary":"Spring Interceptor 与 Servlet Filter 区别与使用示例","title":"Spring 拦截器与 Servlet Filter 的区别与使用"},{"content":" 免责声明 本文内容仅限学习和研究目的，禁止商业用途。请在下载后务必于 24 小时内删除！ 本文内容来源于网络分享，请自行甄别，谨防上当受骗！ 本文内容不提供任何技术支持，请自行研究学习！ 若资金允许，请购买正版，谢谢合作！ Introduction 本文主要分享以下两种方式：\nHEU KMS Activator Microsoft Activation Scripts（MAS） 请自行选择合适的方式使用。\nHEU KMS Activator 前往 Github 下载。图形化界面，操作简单，在 GitHub 上有说明文档可供参考。\nMicrosoft Activation Scripts（MAS） Method 1 - PowerShell (Recommended)\nRight-click on the Windows start menu and select PowerShell or Terminal (Not CMD). Copy and paste the code below and press enter powershell 1 irm https://massgrave.dev/get | iex You will see the activation options. Follow the on-screen instructions. That’s all. Method 2 - Traditional Download the file from GitHub or Bitbucket Right-click on the downloaded zip file and extract In the extracted folder, find the folder named All-In-One-Version Run the file named MAS_AIO.cmd You will see the activation options, follow the on-screen instructions. That’s all. To run the scripts in unattended mode, check here.\n","permalink":"https://tofuwine.github.io/posts/4ee6297b/","summary":"Windows \u0026amp; Office Activation","title":"Microsoft Activation"},{"content":"配置相关 如何修改项目的 git 用户名 / 邮箱 方式一：\n修改 .git 文件夹中的 config 文件：\nconfig 1 2 3 [user] name = yourname email = email@example.com 方式二：\n通过命令行执行以下命令修改：\nshell 1 2 3 4 5 6 7 8 # 修改当前项目的 git 用户名 git config user.name \u0026#34;yourname\u0026#34; # 修改当前项目的 git 邮箱 git config user.email \u0026#34;email@example.com\u0026#34; # 或者你也可以修改全局配置 git config --global user.name \u0026#34;yourname\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; 禁用 SSL 校验 执行以下命令禁用 SSL 校验。\nshell 1 git config --global http.sslVerify false 功能相关 修改 .gitignore 文件后使其生效 思路：清除全局缓存后再添加所有文件\nshell 1 2 3 4 5 6 # 1. 清除缓存 (别忘了 \u0026#34;.\u0026#34;) git rm -r --cached . # 2. 添加所有文件 (别忘了 \u0026#34;.\u0026#34;) git add . # 3. 提交 [可选] git commit -m \u0026#34;update .gitingore\u0026#34; 生成密钥 执行以下命令生成密钥：\nshell 1 ssh-keygen -t ed25519 -C \u0026#34;email@example.com\u0026#34; 更新远程分支列表 执行以下命令更新远程分支列表：\nshell 1 git remote update origin --prune 必须带 --prune ，否则效果和 git fetch 一样，即新增加的分支能 fetch 下来，但是被删掉的分支却不能同步删掉本地的 origin 的。\n修改远程仓库地址后提示 401 错误描述：\ntext 1 error: RPC failed; HTTP 401 curl 22 The requested URL returned error: 401 解决方式：\nshell 1 git remote set-url origin \u0026lt;new-url\u0026gt; 然后重新 push 就会提示输入账号 / 密码。\n修改提交时间 使用如下代码，可以提交到指定的时间：\nshell 1 git commit --date=\u0026#34;Sep 30 15:05:20 2022 +0800\u0026#34; -am \u0026#34;提交内容\u0026#34; 月份可参考 附录：月份对照表\n附录 月份对照表 月份 英文 缩写 1 月 January Jan 2 月 February Feb 3 月 March Mar 4 月 April Apr 5 月 May May 6 月 June Jun 7 月 July Jul 8 月 August Aug 9 月 September Sep 10 月 October Oct 11 月 November Nov 12 月 December Dec ","permalink":"https://tofuwine.github.io/posts/10a5c8d8/","summary":"Git 常见问题汇总","title":"Git FAQs"}]